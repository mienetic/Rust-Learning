//! üèóÔ∏è Blockchain and Cryptocurrency - ‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏ä‡∏ô‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û
//!
//! üéØ ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Blockchain ‡πÅ‡∏•‡∏∞ Cryptocurrency ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•‡πÉ‡∏ô‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ!

use std::collections::HashMap;
use std::time::{SystemTime, UNIX_EPOCH};
use std::fmt;

/// üîê ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Æ‡∏ä‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ (simplified SHA-256) - ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•
fn simple_hash(input: &str) -> String {
    use std::collections::hash_map::DefaultHasher;
    use std::hash::{Hash, Hasher};
    
    let mut hasher = DefaultHasher::new();
    input.hash(&mut hasher);
    format!("{:016x}", hasher.finish())
}

/// üí∞ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° - ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•‡πÉ‡∏ô‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ
#[derive(Debug, Clone, PartialEq)]
struct Transaction {
    id: String,
    from: String,
    to: String,
    amount: f64,
    timestamp: u64,
    signature: Option<String>,
}

impl Transaction {
    fn new(from: String, to: String, amount: f64) -> Self {
        let timestamp = SystemTime::now()
            .duration_since(UNIX_EPOCH)
            .unwrap()
            .as_secs();
        
        let id = simple_hash(&format!("{from}{to}{amount}{timestamp}"));
        
        Self {
            id,
            from,
            to,
            amount,
            timestamp,
            signature: None,
        }
    }
    
    fn sign(&mut self, private_key: &str) {
        let data = format!("{}{}{}{}", self.from, self.to, self.amount, self.timestamp);
        self.signature = Some(simple_hash(&format!("{data}{private_key}")));
    }
    
    fn verify_signature(&self, public_key: &str) -> bool {
        if let Some(ref signature) = self.signature {
            let data = format!("{}{}{}{}", self.from, self.to, self.amount, self.timestamp);
            let expected_signature = simple_hash(&format!("{data}{public_key}"));
            signature == &expected_signature
        } else {
            false
        }
    }
    
    fn is_valid(&self) -> bool {
        !self.from.is_empty() && 
        !self.to.is_empty() && 
        self.amount > 0.0 &&
        self.signature.is_some()
    }
}

/// üß± ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏•‡πá‡∏≠‡∏Å - ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏ã‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÉ‡∏ô‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ
#[derive(Debug, Clone)]
struct Block {
    index: u64,
    timestamp: u64,
    transactions: Vec<Transaction>,
    previous_hash: String,
    nonce: u64,
    hash: String,
    merkle_root: String,
}

impl Block {
    fn new(index: u64, transactions: Vec<Transaction>, previous_hash: String) -> Self {
        let timestamp = SystemTime::now()
            .duration_since(UNIX_EPOCH)
            .unwrap()
            .as_secs();
        
        let merkle_root = Self::calculate_merkle_root(&transactions);
        
        let mut block = Self {
            index,
            timestamp,
            transactions,
            previous_hash,
            nonce: 0,
            hash: String::new(),
            merkle_root,
        };
        
        block.hash = block.calculate_hash();
        block
    }
    
    fn calculate_hash(&self) -> String {
        let data = format!(
            "{}{}{}{}{}{}",
            self.index,
            self.timestamp,
            self.previous_hash,
            self.merkle_root,
            self.nonce,
            self.transactions.len()
        );
        simple_hash(&data)
    }
    
    fn calculate_merkle_root(transactions: &[Transaction]) -> String {
        if transactions.is_empty() {
            return simple_hash("");
        }
        
        let mut hashes: Vec<String> = transactions
            .iter()
            .map(|tx| simple_hash(&tx.id))
            .collect();
        
        while hashes.len() > 1 {
            let mut next_level = Vec::new();
            
            for chunk in hashes.chunks(2) {
                if chunk.len() == 2 {
                    next_level.push(simple_hash(&format!("{}{}", chunk[0], chunk[1])));
                } else {
                    next_level.push(chunk[0].clone());
                }
            }
            
            hashes = next_level;
        }
        
        hashes[0].clone()
    }
    
    fn mine_block(&mut self, difficulty: usize) {
        let target = "0".repeat(difficulty);
        
        println!("Mining block {}...", self.index);
        let start_time = SystemTime::now();
        
        loop {
            self.hash = self.calculate_hash();
            
            if self.hash.starts_with(&target) {
                let duration = start_time.elapsed().unwrap();
                println!(
                    "Block mined: {} (nonce: {}, time: {:.2}s)",
                    self.hash,
                    self.nonce,
                    duration.as_secs_f64()
                );
                break;
            }
            
            self.nonce += 1;
        }
    }
    
    fn is_valid(&self, previous_block: Option<&Self>) -> bool {
        // Check hash
        if self.hash != self.calculate_hash() {
            return false;
        }
        
        // Check previous hash
        if let Some(prev) = previous_block {
            if self.previous_hash != prev.hash {
                return false;
            }
            
            if self.index != prev.index + 1 {
                return false;
            }
        }
        
        // Check merkle root
        if self.merkle_root != Self::calculate_merkle_root(&self.transactions) {
            return false;
        }
        
        // Check all transactions
        for transaction in &self.transactions {
            if !transaction.is_valid() {
                return false;
            }
        }
        
        true
    }
}

/// ‚õìÔ∏è ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏ä‡∏ô - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ
#[derive(Debug)]
struct Blockchain {
    chain: Vec<Block>,
    difficulty: usize,
    pending_transactions: Vec<Transaction>,
    mining_reward: f64,
    balances: HashMap<String, f64>,
}

impl Blockchain {
    fn new() -> Self {
        let mut blockchain = Self {
            chain: Vec::new(),
            difficulty: 2,
            pending_transactions: Vec::new(),
            mining_reward: 100.0,
            balances: HashMap::new(),
        };
        
        blockchain.create_genesis_block();
        blockchain
    }
    
    fn create_genesis_block(&mut self) {
        let genesis_transactions = vec![
            Transaction {
                id: "genesis".to_string(),
                from: "genesis".to_string(),
                to: "genesis".to_string(),
                amount: 0.0,
                timestamp: 0,
                signature: Some("genesis_signature".to_string()),
            }
        ];
        
        let mut genesis_block = Block::new(0, genesis_transactions, "0".to_string());
        genesis_block.mine_block(self.difficulty);
        
        self.chain.push(genesis_block);
    }
    
    fn get_latest_block(&self) -> &Block {
        self.chain.last().unwrap()
    }
    
    fn add_transaction(&mut self, mut transaction: Transaction) {
        if transaction.from != "mining_reward" {
            // Check if sender has sufficient balance
            let balance = self.get_balance(&transaction.from);
            if balance < transaction.amount {
                println!("Insufficient balance for transaction: {}", transaction.id);
                return;
            }
        }
        
        // For simplicity, auto-sign with a mock private key
        transaction.sign(&format!("{}_private_key", transaction.from));
        
        self.pending_transactions.push(transaction);
    }
    
    fn mine_pending_transactions(&mut self, mining_reward_address: &str) {
        // Add mining reward transaction
        let reward_transaction = Transaction {
            id: simple_hash(&format!("mining_reward_{}", SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_secs())),
            from: "mining_reward".to_string(),
            to: mining_reward_address.to_string(),
            amount: self.mining_reward,
            timestamp: SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_secs(),
            signature: Some("mining_reward_signature".to_string()),
        };
        
        self.pending_transactions.push(reward_transaction);
        
        let mut block = Block::new(
            self.chain.len() as u64,
            self.pending_transactions.clone(),
            self.get_latest_block().hash.clone(),
        );
        
        block.mine_block(self.difficulty);
        
        // Update balances
        for transaction in &block.transactions {
            if transaction.from != "mining_reward" && transaction.from != "genesis" {
                *self.balances.entry(transaction.from.clone()).or_insert(0.0) -= transaction.amount;
            }
            if transaction.to != "genesis" {
                *self.balances.entry(transaction.to.clone()).or_insert(0.0) += transaction.amount;
            }
        }
        
        self.chain.push(block);
        self.pending_transactions.clear();
    }
    
    fn get_balance(&self, address: &str) -> f64 {
        self.balances.get(address).copied().unwrap_or(0.0)
    }
    
    fn is_chain_valid(&self) -> bool {
        for i in 1..self.chain.len() {
            let current_block = &self.chain[i];
            let previous_block = &self.chain[i - 1];
            
            if !current_block.is_valid(Some(previous_block)) {
                return false;
            }
        }
        
        true
    }
    
    fn get_transaction_history(&self, address: &str) -> Vec<&Transaction> {
        let mut history = Vec::new();
        
        for block in &self.chain {
            for transaction in &block.transactions {
                if transaction.from == address || transaction.to == address {
                    history.push(transaction);
                }
            }
        }
        
        history
    }
}

/// üëõ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏• - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•‡πÉ‡∏ô‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ
#[derive(Debug)]
struct Wallet {
    address: String,
    private_key: String,
    public_key: String,
}

impl Wallet {
    fn new(name: &str) -> Self {
        let private_key = simple_hash(&format!("{name}_private"));
        let public_key = simple_hash(&format!("{name}_public"));
        let address = simple_hash(&public_key)[..16].to_string();
        
        Self {
            address,
            private_key,
            public_key,
        }
    }
    
    fn create_transaction(&self, to: &str, amount: f64) -> Transaction {
        let mut transaction = Transaction::new(self.address.clone(), to.to_string(), amount);
        transaction.sign(&self.private_key);
        transaction
    }
    
    fn get_balance(&self, blockchain: &Blockchain) -> f64 {
        blockchain.get_balance(&self.address)
    }
}

/// üìú ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞ - ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ
#[derive(Debug, Clone)]
struct SmartContract {
    address: String,
    code: String,
    state: HashMap<String, String>,
    owner: String,
}

impl SmartContract {
    fn new(code: String, owner: String) -> Self {
        let address = simple_hash(&format!("{code}{owner}"))[..16].to_string();
        
        Self {
            address,
            code,
            state: HashMap::new(),
            owner,
        }
    }
    
    fn execute(&mut self, function: &str, params: &[&str]) -> Result<String, String> {
        match function {
            "set" => {
                if params.len() != 2 {
                    return Err("set requires 2 parameters: key, value".to_string());
                }
                self.state.insert(params[0].to_string(), params[1].to_string());
                Ok(format!("Set {} = {}", params[0], params[1]))
            }
            "get" => {
                if params.len() != 1 {
                    return Err("get requires 1 parameter: key".to_string());
                }
                match self.state.get(params[0]) {
                    Some(value) => Ok(value.clone()),
                    None => Err(format!("Key '{}' not found", params[0]))
                }
            }
            "transfer" => {
                if params.len() != 2 {
                    return Err("transfer requires 2 parameters: to, amount".to_string());
                }
                // Simplified transfer logic
                Ok(format!("Transferred {} to {}", params[1], params[0]))
            }
            _ => Err(format!("Unknown function: {function}"))
        }
    }
}

/// üíé ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏• - ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ
#[derive(Debug)]
struct Cryptocurrency {
    name: String,
    symbol: String,
    total_supply: f64,
    blockchain: Blockchain,
    smart_contracts: HashMap<String, SmartContract>,
}

impl Cryptocurrency {
    fn new(name: String, symbol: String, total_supply: f64) -> Self {
        Self {
            name,
            symbol,
            total_supply,
            blockchain: Blockchain::new(),
            smart_contracts: HashMap::new(),
        }
    }
    
    fn deploy_contract(&mut self, contract: SmartContract) {
        let address = contract.address.clone();
        self.smart_contracts.insert(address, contract);
    }
    
    fn call_contract(&mut self, contract_address: &str, function: &str, params: &[&str]) -> Result<String, String> {
        if let Some(contract) = self.smart_contracts.get_mut(contract_address) {
            contract.execute(function, params)
        } else {
            Err(format!("Contract not found: {contract_address}"))
        }
    }
    
    fn get_network_stats(&self) -> NetworkStats {
        let total_transactions = self.blockchain.chain.iter()
            .map(|block| block.transactions.len())
            .sum();
        
        let total_blocks = self.blockchain.chain.len();
        
        let hash_rate = if total_blocks > 1 {
            let time_diff = self.blockchain.chain.last().unwrap().timestamp - 
                           self.blockchain.chain.first().unwrap().timestamp;
            if time_diff > 0 {
                (total_blocks - 1) as f64 / time_diff as f64
            } else {
                0.0
            }
        } else {
            0.0
        };
        
        NetworkStats {
            total_blocks,
            total_transactions,
            hash_rate,
            difficulty: self.blockchain.difficulty,
            pending_transactions: self.blockchain.pending_transactions.len(),
        }
    }
}

/// üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢ - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏ä‡∏ô
#[derive(Debug)]
struct NetworkStats {
    total_blocks: usize,
    total_transactions: usize,
    hash_rate: f64,
    difficulty: usize,
    pending_transactions: usize,
}

impl fmt::Display for NetworkStats {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, 
            "Network Stats:\n\
             - Total Blocks: {}\n\
             - Total Transactions: {}\n\
             - Hash Rate: {:.2} blocks/sec\n\
             - Difficulty: {}\n\
             - Pending Transactions: {}",
            self.total_blocks,
            self.total_transactions,
            self.hash_rate,
            self.difficulty,
            self.pending_transactions
        )
    }
}

/// ‚õèÔ∏è ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏∏‡∏î‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏á - ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏ß‡∏°‡∏û‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ
#[derive(Debug)]
struct MiningPool {
    name: String,
    miners: Vec<String>,
    total_hash_power: f64,
    rewards_distributed: f64,
}

impl MiningPool {
    const fn new(name: String) -> Self {
        Self {
            name,
            miners: Vec::new(),
            total_hash_power: 0.0,
            rewards_distributed: 0.0,
        }
    }
    
    fn add_miner(&mut self, miner_address: String, hash_power: f64) {
        self.miners.push(miner_address);
        self.total_hash_power += hash_power;
    }
    
    fn distribute_rewards(&mut self, total_reward: f64) -> HashMap<String, f64> {
        let mut rewards = HashMap::new();
        
        if self.total_hash_power > 0.0 {
            let individual_hash_power = self.total_hash_power / self.miners.len() as f64;
            let reward_per_miner = total_reward * (individual_hash_power / self.total_hash_power);
            
            for miner in &self.miners {
                rewards.insert(miner.clone(), reward_per_miner);
            }
            
            self.rewards_distributed += total_reward;
        }
        
        rewards
    }
}

/// üéØ ‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Blockchain ‡πÅ‡∏•‡∏∞ Cryptocurrency ‡πÉ‡∏ô‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ
pub fn demonstrate_blockchain() {
    println!("‚õìÔ∏è üéì ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Blockchain ‡πÅ‡∏•‡∏∞ Cryptocurrency ‡πÉ‡∏ô‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ Web Development!");
    
    // Create cryptocurrency
    println!("\nü™ô üíé ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ:");
    println!("{:-<50}", "");
    
    let mut rustcoin = Cryptocurrency::new(
        "RustCoin".to_string(),
        "RST".to_string(),
        1_000_000.0
    );
    
    println!("‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á {} ({}) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç", 
            rustcoin.name, rustcoin.symbol, rustcoin.total_supply);
    
    // Create wallets
    println!("\nüëõ üíº ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ:");
    println!("{:-<50}", "");
    
    let alice_wallet = Wallet::new("Alice");
    let bob_wallet = Wallet::new("Bob");
    let charlie_wallet = Wallet::new("Charlie");
    
    println!("üéØ ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏Ç‡∏≠‡∏á Alice: {}", alice_wallet.address);
    println!("üéØ ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏Ç‡∏≠‡∏á Bob: {}", bob_wallet.address);
    println!("üéØ ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏Ç‡∏≠‡∏á Charlie: {}", charlie_wallet.address);
    
    // Initial mining to give Alice some coins
    println!("\n‚õèÔ∏è üöÄ ‡∏Å‡∏≤‡∏£‡∏Ç‡∏∏‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ:");
    println!("{:-<50}", "");
    
    rustcoin.blockchain.mine_pending_transactions(&alice_wallet.address);
    
    println!("üí∞ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á Alice ‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏∏‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç: {} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç", alice_wallet.get_balance(&rustcoin.blockchain));
    
    // Create and add transactions
    println!("\nüí∏ üìù ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ:");
    println!("{:-<50}", "");
    
    let tx1 = alice_wallet.create_transaction(&bob_wallet.address, 30.0);
    let tx2 = alice_wallet.create_transaction(&charlie_wallet.address, 20.0);
    
    rustcoin.blockchain.add_transaction(tx1.clone());
    rustcoin.blockchain.add_transaction(tx2.clone());
    
    println!("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°: {} -> {} ({} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)", tx1.from, tx1.to, tx1.amount);
    println!("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°: {} -> {} ({} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)", tx2.from, tx2.to, tx2.amount);
    
    // Mine transactions
    println!("\n‚õèÔ∏è üî® ‡∏Å‡∏≤‡∏£‡∏Ç‡∏∏‡∏î‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ:");
    println!("{:-<50}", "");
    
    rustcoin.blockchain.mine_pending_transactions(&bob_wallet.address);
    
    // Check balances
    println!("\nüí∞ üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ:");
    println!("{:-<50}", "");
    
    println!("üí≥ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á Alice: {} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç", alice_wallet.get_balance(&rustcoin.blockchain));
    println!("üí≥ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á Bob: {} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç", bob_wallet.get_balance(&rustcoin.blockchain));
    println!("üí≥ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á Charlie: {} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç", charlie_wallet.get_balance(&rustcoin.blockchain));
    
    // Validate blockchain
    println!("\n‚úÖ üîê ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏ä‡∏ô:");
    println!("{:-<50}", "");
    
    println!("üõ°Ô∏è ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏ä‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? {}", rustcoin.blockchain.is_chain_valid());
    
    // Smart Contract Demo
    println!("\nüìú ü§ñ ‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡πÉ‡∏ô‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ:");
    println!("{:-<50}", "");
    
    let contract = SmartContract::new(
        "simple_storage".to_string(),
        alice_wallet.address.clone()
    );
    
    println!("üöÄ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: {}", contract.address);
    let contract_address = contract.address.clone();
    rustcoin.deploy_contract(contract);
    
    // Execute contract functions
    match rustcoin.call_contract(&contract_address, "set", &["name", "RustCoin"]) {
        Ok(result) => println!("‚ú® ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏ç‡∏ç‡∏≤: {result}"),
        Err(error) => println!("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: {error}"),
    }
    
    match rustcoin.call_contract(&contract_address, "get", &["name"]) {
        Ok(result) => println!("üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {result}"),
        Err(error) => println!("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°: {error}"),
    }
    
    // Mining Pool Demo
    println!("\nüèä ‚õèÔ∏è ‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏∏‡∏î‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏á‡πÉ‡∏ô‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ:");
    println!("{:-<50}", "");
    
    let mut mining_pool = MiningPool::new("RustPool".to_string());
    mining_pool.add_miner(alice_wallet.address.clone(), 100.0);
    mining_pool.add_miner(bob_wallet.address.clone(), 150.0);
    mining_pool.add_miner(charlie_wallet.address, 75.0);
    
    println!("üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏∏‡∏î‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏á '{}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", mining_pool.name);
    println!("‚ö° ‡∏û‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏∏‡∏î‡∏£‡∏ß‡∏°: {} ‡∏´‡∏ô‡πà‡∏ß‡∏¢", mining_pool.total_hash_power);
    
    let rewards = mining_pool.distribute_rewards(300.0);
    println!("\nüí∞ ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡∏Å‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÉ‡∏ô‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ:");
    for (miner, reward) in rewards {
        println!("  üéÅ {miner}: {reward:.2} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç");
    }
    
    // Network Statistics
    println!("\nüìä üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏ä‡∏ô‡πÉ‡∏ô‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ:");
    println!("{:-<50}", "");
    
    let stats = rustcoin.get_network_stats();
    println!("{stats}");
    
    // Transaction History
    println!("\nüìã üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á Alice ‡πÉ‡∏ô‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ:");
    println!("{:-<50}", "");
    
    let alice_history = rustcoin.blockchain.get_transaction_history(&alice_wallet.address);
    for (i, tx) in alice_history.iter().enumerate() {
        println!("{}. üí∏ {} -> {} (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç, ‡πÄ‡∏ß‡∏•‡∏≤: {})", 
                i + 1, tx.from, tx.to, tx.amount, tx.timestamp);
    }
    
    // Blockchain Explorer
    println!("\nüîç üåê ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏ä‡∏ô‡πÉ‡∏ô‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ:");
    println!("{:-<50}", "");
    
    for (i, block) in rustcoin.blockchain.chain.iter().enumerate() {
        println!("üß± ‡∏ö‡∏•‡πá‡∏≠‡∏Å #{}: {} ‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°, ‡πÅ‡∏Æ‡∏ä: {}", 
                i, block.transactions.len(), &block.hash[..16]);
        
        for (j, tx) in block.transactions.iter().enumerate() {
            println!("  üí≥ ‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° {}: {} -> {} ({} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)", 
                    j + 1, tx.from, tx.to, tx.amount);
        }
    }
    
    println!("\nüéâ ‚úÖ ‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Blockchain ‡πÅ‡∏•‡∏∞ Cryptocurrency ‡πÉ‡∏ô‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!");
}

#[cfg(test)]
mod tests {
    use super::*;
    
    #[test]
    fn test_transaction_creation() {
        let tx = Transaction::new("Alice".to_string(), "Bob".to_string(), 50.0);
        assert_eq!(tx.from, "Alice");
        assert_eq!(tx.to, "Bob");
        assert_eq!(tx.amount, 50.0);
        assert!(tx.signature.is_none());
    }
    
    #[test]
    fn test_transaction_signing() {
        let mut tx = Transaction::new("Alice".to_string(), "Bob".to_string(), 50.0);
        tx.sign("alice_private_key");
        assert!(tx.signature.is_some());
        assert!(tx.is_valid());
    }
    
    #[test]
    fn test_block_creation() {
        let transactions = vec![
            Transaction::new("Alice".to_string(), "Bob".to_string(), 50.0)
        ];
        let block = Block::new(1, transactions, "previous_hash".to_string());
        assert_eq!(block.index, 1);
        assert_eq!(block.previous_hash, "previous_hash");
        assert_eq!(block.transactions.len(), 1);
    }
    
    #[test]
    fn test_blockchain_creation() {
        let blockchain = Blockchain::new();
        assert_eq!(blockchain.chain.len(), 1); // Genesis block
        assert!(blockchain.is_chain_valid());
    }
    
    #[test]
    fn test_wallet_creation() {
        let wallet = Wallet::new("Alice");
        assert!(!wallet.address.is_empty());
        assert!(!wallet.private_key.is_empty());
        assert!(!wallet.public_key.is_empty());
    }
    
    #[test]
    fn test_smart_contract() {
        let mut contract = SmartContract::new(
            "test_contract".to_string(),
            "owner".to_string()
        );
        
        let result = contract.execute("set", &["key", "value"]);
        assert!(result.is_ok());
        
        let result = contract.execute("get", &["key"]);
        assert_eq!(result.unwrap(), "value");
    }
    
    #[test]
    fn test_mining_pool() {
        let mut pool = MiningPool::new("TestPool".to_string());
        pool.add_miner("miner1".to_string(), 100.0);
        pool.add_miner("miner2".to_string(), 200.0);
        
        assert_eq!(pool.total_hash_power, 300.0);
        assert_eq!(pool.miners.len(), 2);
        
        let rewards = pool.distribute_rewards(300.0);
        assert_eq!(rewards.len(), 2);
    }
}