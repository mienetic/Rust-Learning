//! Collections Module - ‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥ Collections ‡∏°‡∏´‡∏±‡∏®‡∏à‡∏£‡∏£‡∏¢‡πå‡πÅ‡∏ö‡∏ö Louvre Museum! üèõÔ∏è‚ú®üíé
//!
//! ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏û‡∏¥‡∏ò‡∏†‡∏±‡∏ì‡∏ë‡πå Collections ‡∏ó‡∏µ‡πà‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà‡∏Å‡∏ß‡πà‡∏≤ British Museum! üèõÔ∏èüåç ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö
//! Collections ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏ô Rust ‡πÅ‡∏ö‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö Marie Kondo! üìö‚ú®

// Module declarations
mod hashmaps;
mod other_collections;
mod practice_collections;
mod vectors;

// Re-exports
pub use hashmaps::*;
pub use other_collections::*;
pub use practice_collections::*;
pub use vectors::*;

/// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á collections (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å main.rs) - ‡∏ó‡∏±‡∏ß‡∏£‡πå‡∏û‡∏¥‡∏û‡∏¥‡∏ò‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÅ‡∏ö‡∏ö VIP! üèõÔ∏èüé´üëë
pub fn run_collections_examples() {
    println!("   üìä Vectors (‡πÄ‡∏ß‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå: ‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏¢‡∏≤‡∏á‡∏¢‡∏∑‡∏î!)");
    learn_vectors();

    println!("\n   üóÇÔ∏è HashMaps (‡πÅ‡∏Æ‡∏ä‡πÅ‡∏°‡∏õ: ‡∏ï‡∏π‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ö‡∏ö key-value ‡∏™‡πÑ‡∏ï‡∏•‡πå Netflix recommendation!)");
    learn_hashmaps();

    println!("\n   üì¶ Other Collections (‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡∏Å‡∏ä‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ: ‡∏ï‡∏π‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÅ‡∏ö‡∏ö limited edition!)");
    learn_other_collections();

    println!("\n   üí™ ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î Collections (‡∏¢‡∏¥‡∏°‡∏ù‡∏∂‡∏Å‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡∏Å‡∏ä‡∏±‡∏ô‡πÅ‡∏ö‡∏ö CrossFit!)");
    practice_collections();
}

// Tests module
#[cfg(test)]
mod tests {
    use std::collections::{HashMap, HashSet};

    #[test]
    fn test_vector_operations() {
        let mut v = vec![1, 2, 3];
        v.push(4);
        assert_eq!(v.len(), 4);
        assert_eq!(v[3], 4);

        let popped = v.pop();
        assert_eq!(popped, Some(4));
        assert_eq!(v.len(), 3);
    }

    #[test]
    fn test_hashmap_operations() {
        let mut map = HashMap::new();
        map.insert("key1", "value1");
        map.insert("key2", "value2");

        assert_eq!(map.get("key1"), Some(&"value1"));
        assert_eq!(map.get("key3"), None);
        assert_eq!(map.len(), 2);
    }

    #[test]
    fn test_hashset_operations() {
        let mut set = HashSet::new();
        set.insert(1);
        set.insert(2);
        set.insert(1); // ‡∏ã‡πâ‡∏≥ (‡πÅ‡∏ï‡πà HashSet ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ã‡πâ‡∏≥‡πÅ‡∏ö‡∏ö exclusive club! üö´üëë)

        assert_eq!(set.len(), 2);
        assert!(set.contains(&1));
        assert!(!set.contains(&3));
    }
}
