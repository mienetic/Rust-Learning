//! # Testing and Benchmarking Macros - ‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö Testing Spells! üß™‚ú®
//!
//! ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ macros ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
//! ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏î‡∏û‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ! üî¨ü™Ñ
//!
//! üéØ **‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢**: ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û!

/// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á macro ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö testing - ‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö Testing Spells! üß™üîÆ
pub fn testing_macros_examples() {
    println!("\nüß™‚ú® === ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Testing Macros - ‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö! === ‚ú®üß™");
    println!("ü™Ñ ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! üîç");

    // üéØ Macro ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö assertion ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô - ‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á! üìè‚ú®
    macro_rules! assert_approx_eq {
        ($left:expr, $right:expr, $tolerance:expr) => {
            {
                let left_val: f64 = $left as f64;      // üî¢ ‡∏Ñ‡πà‡∏≤‡∏ã‡πâ‡∏≤‡∏¢
                let right_val: f64 = $right as f64;    // üî¢ ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ß‡∏≤
                let tolerance_val: f64 = $tolerance as f64;  // üìè ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ
                let diff = (left_val - right_val).abs();     // üßÆ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á
                if diff > tolerance_val {
                    panic!(
                        "üí• ‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå assertion ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: `(left ‚âà right)` \n  üî¢ left: `{}`,\n  üî¢ right: `{}`,\n  üìä diff: `{}`,\n  üìè tolerance: `{}`",
                        left_val, right_val, diff, tolerance_val
                    );
                }
            }
        };
    }

    // ‚è±Ô∏è Macro ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö benchmark ‡∏á‡πà‡∏≤‡∏¢‡πÜ - ‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ö‡∏ö Speed Wizard! üèÉ‚Äç‚ôÇÔ∏è‚ú®
    macro_rules! simple_benchmark {
        ($name:expr, $code:block) => {{
            let start = std::time::Instant::now();  // ‚è∞ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå!
            let result = $code;                     // ü™Ñ ‡∏ó‡∏≥‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå!
            let duration = start.elapsed();        // ‚è±Ô∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå!
            println!("‚è±Ô∏è‚ú® {}: {:?} ü™Ñ", $name, duration);  // üìä ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå!
            result
        }};
    }

    println!("\nüéØ === ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå assertion === üéØ");
    // üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö assertion macro - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö!
    assert_approx_eq!(std::f64::consts::PI, 3.14160, 0.001);  // ü•ß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ PI!
    println!("‚úÖüéâ Approximate equality test ‡∏ú‡πà‡∏≤‡∏ô - ‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ü™Ñ");

    println!("\n‚è±Ô∏è === ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå benchmark === ‚è±Ô∏è");
    // üèÉ‚Äç‚ôÇÔ∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö benchmark macro - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤!
    let result = simple_benchmark!("‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì fibonacci", {  // üßÆ ‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Fibonacci!
        fn fibonacci(n: u32) -> u32 {
            match n {
                0 => 0,  // üéØ ‡∏Å‡∏£‡∏ì‡∏µ‡∏ê‡∏≤‡∏ô: F(0) = 0
                1 => 1,  // üéØ ‡∏Å‡∏£‡∏ì‡∏µ‡∏ê‡∏≤‡∏ô: F(1) = 1
                _ => fibonacci(n - 1) + fibonacci(n - 2),  // üîÑ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÅ‡∏ö‡∏ö recursive!
            }
        }
        fibonacci(20)  // üéØ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Fibonacci ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà 20!
    });

    println!("üî¢‚ú® Fibonacci(20) = {result} üéâ");
}

/// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á macro ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö performance testing - ‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏ß‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö Performance Spells! ‚ö°üîÆ
pub fn performance_macros_examples() {
    println!("\n‚ö°‚ú® === ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Performance Macros - ‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏ß‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û! === ‚ú®‚ö°");
    println!("ü™Ñ ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û! üèÉ‚Äç‚ôÇÔ∏è");

    // ‚è∞ Macro ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏∂‡πâ‡∏ô - ‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ö‡∏ö Precision Timer! üéØ‚ú®
    #[allow(unused_macros)]  // ü§´ ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á warning ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏ô‡∏µ‡πâ!
    macro_rules! time_it {
        ($name:expr, $code:block) => {{
            let start = std::time::Instant::now();  // ‚è∞ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå!
            println!("üöÄ‚ú® ‡πÄ‡∏£‡∏¥‡πà‡∏°: {} ü™Ñ", $name);      // üé¨ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå!
            let result = $code;                     // ü™Ñ ‡∏ó‡∏≥‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå!
            let duration = start.elapsed();        // ‚è±Ô∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå!
            println!("üèÅüéâ ‡πÄ‡∏™‡∏£‡πá‡∏à: {} ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {:?} ‚ú®", $name, duration);  // üéä ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå!
            result
        }};
    }

    // üèÜ Macro ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û - ‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß! üèÉ‚Äç‚ôÇÔ∏è‚ö°
    macro_rules! compare_performance {
        ($name1:expr, $code1:block, $name2:expr, $code2:block) => {{
            println!("üèÜ‚ú® ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå: ü™Ñ");

            let start1 = std::time::Instant::now();  // ‚è∞ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏ó‡∏µ‡πà 1!
            let result1 = $code1;                    // ü™Ñ ‡∏ó‡∏≥‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏ó‡∏µ‡πà 1!
            let duration1 = start1.elapsed();       // ‚è±Ô∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏ó‡∏µ‡πà 1!

            let start2 = std::time::Instant::now();  // ‚è∞ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏ó‡∏µ‡πà 2!
            let result2 = $code2;                    // ü™Ñ ‡∏ó‡∏≥‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏ó‡∏µ‡πà 2!
            let duration2 = start2.elapsed();       // ‚è±Ô∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏ó‡∏µ‡πà 2!

            println!("   üé≠ {} ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤: {:?}", $name1, duration1);  // üìä ‡∏ú‡∏•‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏ó‡∏µ‡πà 1
            println!("   üé≠ {} ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤: {:?}", $name2, duration2);  // üìä ‡∏ú‡∏•‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏ó‡∏µ‡πà 2

            if duration1 < duration2 {
                println!("   ü•á‚ú® {} ‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤! üèÉ‚Äç‚ôÇÔ∏èüí®", $name1);  // üèÜ ‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞!
            } else {
                println!("   ü•á‚ú® {} ‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤! üèÉ‚Äç‚ôÇÔ∏èüí®", $name2);  // üèÜ ‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞!
            }

            (result1, result2)
        }};
    }

    println!("\nüèÜ === ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û === üèÜ");
    // üèÉ‚Äç‚ôÇÔ∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö performance comparison - ‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå!
    let (result1, result2) = compare_performance!(
        "Vector push",           // üêå ‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå Vector ‡πÅ‡∏ö‡∏ö‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
        {
            let mut vec = Vec::new();  // üì¶ ‡∏™‡∏£‡πâ‡∏≤‡∏á Vector ‡∏ß‡πà‡∏≤‡∏á
            for i in 0..1000 {
                vec.push(i);           // ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß
            }
            vec.len()                  // üìè ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
        },
        "Vector with_capacity",  // üöÄ ‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå Vector ‡πÅ‡∏ö‡∏ö optimized
        {
            let mut vec = Vec::with_capacity(1000);  // üì¶ ‡∏™‡∏£‡πâ‡∏≤‡∏á Vector ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏ô‡∏≤‡∏î
            for i in 0..1000 {
                vec.push(i);                         // ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß (‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤!)
            }
            vec.len()                                // üìè ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
        }
    );

    println!("\nüìäüéâ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå: {result1} vs {result2} ‚ú®");
    println!("\nüéâ ‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üß™‚ú®");
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_assert_approx_eq_macro() {
        macro_rules! assert_approx_eq {
            ($left:expr, $right:expr, $tolerance:expr) => {{
                let diff = ($left as f64 - $right as f64).abs();
                assert!(diff <= $tolerance as f64);
            }};
        }

        assert_approx_eq!(std::f64::consts::PI, 3.14160, 0.001);
    }

    #[test]
    fn test_benchmark_macro() {
        macro_rules! simple_benchmark {
            ($name:expr, $code:block) => {{
                let start = std::time::Instant::now();
                let result = $code;
                let _duration = start.elapsed();
                result
            }};
        }

        let result = simple_benchmark!("test calculation", {
            let mut sum = 0;
            for i in 1..=100 {
                sum += i;
            }
            sum
        });

        assert_eq!(result, 5050); // 1+2+...+100 = 5050
    }

    #[test]
    fn test_testing_macros_functions() {
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà panic
        testing_macros_examples();
        performance_macros_examples();
    }
}