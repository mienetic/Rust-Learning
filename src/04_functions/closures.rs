//! Closures - р╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ Closures р╣Гр╕Щ Rust
//!
//! р╣Др╕Яр╕ер╣Мр╕Щр╕╡р╣Йр╕кр╕нр╕Щр╣Ар╕гр╕╖р╣Ир╕нр╕З closures, р╕Бр╕▓р╕г capture environment, closure types (Fn, `FnMut`, `FnOnce`)
//! р╣Бр╕ер╕░р╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ closures р╕Бр╕▒р╕Ъ iterator methods
//! (р╣Вр╕гр╕Зр╕ер╕░р╕Др╕гр╣Бр╕лр╣Ир╕Зр╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Щр╕┤р╕гр╕Щр╕▓р╕б: р╕ир╕┤р╕ер╕Ыр╕░р╣Бр╕лр╣Ир╕Зр╕Бр╕▓р╕гр╕Ир╕▒р╕Ър╕Хр╕▒р╕з! ЁЯОнтЬи)

/// р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Й Closures
/// р╕вр╕┤р╕Щр╕Фр╕╡р╕Хр╣Йр╕нр╕Щр╕гр╕▒р╕Ър╕кр╕╣р╣Ир╣Вр╕гр╕Зр╕ер╕░р╕Др╕гр╣Бр╕лр╣Ир╕Зр╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Щр╕┤р╕гр╕Щр╕▓р╕б! ЁЯОн
pub fn learn_closures() {
    println!("\nЁЯОн === Closures: р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Щр╕┤р╕гр╕Щр╕▓р╕бр╕кр╕╕р╕Фр╣Ар╕Ир╣Лр╕З! === ЁЯОн");

    // Basic closure (р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Щр╕┤р╕гр╕Щр╕▓р╕бр╕бр╕╖р╕нр╣Гр╕лр╕бр╣И! ЁЯС╢)
    let add_one = |x| x + 1;  // р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Ър╕зр╕Б 1 р╣Бр╕Ър╕Ър╣Ар╕Чр╣И! ЁЯШО
    println!("ЁЯФв add_one(5) = {} (р╕Зр╣Ир╕▓р╕вр╕бр╕▓р╕Б! ЁЯОп)", add_one(5));

    // Closure р╕Бр╕▒р╕Ъ type annotations (р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Щр╕┤р╕гр╕Щр╕▓р╕бр╣Бр╕Ър╕Ър╕Кр╕▒р╕Фр╣Ар╕Ир╕Щ! ЁЯУЭ)
    let multiply = |x: i32, y: i32| -> i32 { x * y };  // р╕гр╕░р╕Ър╕╕р╕Кр╕Щр╕┤р╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Кр╕▒р╕Фр╣Ж! ЁЯОп
    println!("тЬЦя╕П multiply(4, 5) = {} (р╕Др╕╣р╕Ур╣Ар╕Бр╣Ир╕З! ЁЯМЯ)", multiply(4, 5));

    // Closure р╕Чр╕╡р╣И capture environment (р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Щр╕▒р╕Бр╕ер╕▒р╕Бр╕Вр╣Вр╕бр╕в! ЁЯХ╡я╕ПтАНтЩВя╕П)
    let factor = 10;  // р╕Хр╕▒р╕зр╣Бр╕Ыр╕гр╣Ар╕лр╕вр╕╖р╣Ир╕н! ЁЯОп
    let scale = |x| x * factor;  // р╕Ир╕▒р╕Ър╕Хр╕▒р╕зр╣Бр╕Ыр╕г factor р╕бр╕▓р╣Гр╕Кр╣Й! ЁЯкд
    println!("ЁЯУП scale(5) = {} (р╕Др╕╣р╕Ур╕Фр╣Йр╕зр╕в {} р╕Чр╕╡р╣Ир╕Ир╕▒р╕Ър╕бр╕▓р╣Др╕Фр╣Й! ЁЯОг)", scale(5), factor);

    // Closure р╕Бр╕▒р╕Ъ move keyword (р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Щр╕▒р╕Бр╕вр╣Йр╕▓р╕вр╕Ър╣Йр╕▓р╕Щ! ЁЯУж)
    let name = String::from("р╕гр╕▒р╕кр╕Хр╣М");  // р╕Кр╕╖р╣Ир╕нр╣Ар╕Фр╕┤р╕б! ЁЯП╖я╕П
    let greet = move |greeting| format!("{greeting} {name}!");  // р╕вр╣Йр╕▓р╕в name р╣Ар╕Вр╣Йр╕▓р╕бр╕▓р╣Гр╕Щр╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щ! ЁЯЪЪ
    println!("ЁЯСЛ {} (р╕вр╣Йр╕▓р╕вр╕бр╕▓р╣Бр╕ер╣Йр╕з! ЁЯУН)", greet("р╕кр╕зр╕▒р╕кр╕Фр╕╡"));
    // println!("{}", name); // Error! name р╕Цр╕╣р╕Б move р╣Др╕Ыр╣Бр╕ер╣Йр╕з (р╕лр╕▓р╕вр╣Др╕Ыр╣Бр╕ер╣Йр╕з! ЁЯС╗)

    // Closure р╕Бр╕▒р╕Ъ Vec methods (р╕кр╕зр╕Щр╕кр╕Щр╕╕р╕Бр╣Бр╕лр╣Ир╕Зр╕Бр╕▓р╕гр╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕ер╕Вр╣Йр╕нр╕бр╕╣р╕е! ЁЯОв)
    let numbers = [1, 2, 3, 4, 5];  // р╕Чр╕╡р╕бр╕Хр╕▒р╕зр╣Ар╕ер╕В! ЁЯФв

    // map (р╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е! ЁЯФД)
    let doubled: Vec<i32> = numbers.iter().map(|x| x * 2).collect();  // р╕Др╕╣р╕У 2 р╕Чр╕╕р╕Бр╕Хр╕▒р╕з! тЬЦя╕П2я╕ПтГг
    println!("ЁЯФв doubled: {doubled:?} (р╣Гр╕лр╕Нр╣Ир╕Вр╕╢р╣Йр╕Щ 2 р╣Ар╕Чр╣Ир╕▓! ЁЯУИ)");

    // filter (р╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕Бр╕гр╕нр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е! ЁЯФН)
    let evens: Vec<&i32> = numbers.iter().filter(|&x| x % 2 == 0).collect();  // р╣Ар╕нр╕▓р╣Бр╕Хр╣Ир╣Ар╕ер╕Вр╕Др╕╣р╣И! ЁЯСл
    println!("ЁЯФв evens: {evens:?} (р╣Ар╕ер╕Вр╕Др╕╣р╣Ир╣Ар╕Чр╣Ир╕▓р╕Щр╕▒р╣Йр╕Щ! ЁЯТС)");

    // fold/reduce (р╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕гр╕зр╕бр╕Вр╣Йр╕нр╕бр╕╣р╕е! ЁЯФЧ)
    let sum = numbers.iter().sum::<i32>();  // р╕гр╕зр╕бр╕Чр╕╕р╕Бр╕Хр╕▒р╕з! тЮХ
    println!("тЮХ sum: {sum} (р╕гр╕зр╕бр╣Бр╕ер╣Йр╕зр╣Др╕Фр╣Йр╣Ар╕Чр╣Ир╕▓р╕Щр╕╡р╣Й! ЁЯзо)");

    // find (р╕Щр╕▒р╕Бр╕кр╕╖р╕Ър╕Хр╕▒р╕зр╣Ар╕ер╕В! ЁЯХ╡я╕ПтАНтЩАя╕П)
    let found = numbers.iter().find(|&x| x > &3);  // р╕лр╕▓р╕Хр╕▒р╕зр╕Чр╕╡р╣Ир╕бр╕▓р╕Бр╕Бр╕зр╣Ир╕▓ 3! ЁЯФН
    match found {
        Some(x) => println!("ЁЯФН р╕Юр╕Ър╕Хр╕▒р╕зр╣Ар╕ер╕Вр╕Чр╕╡р╣Ир╕бр╕▓р╕Бр╕Бр╕зр╣Ир╕▓ 3: {x} (р╣Ар╕Ир╕нр╣Бр╕ер╣Йр╕з! ЁЯОп)"),
        None => println!("ЁЯФН р╣Др╕бр╣Ир╕Юр╕Ър╕Хр╕▒р╕зр╣Ар╕ер╕Вр╕Чр╕╡р╣Ир╕бр╕▓р╕Бр╕Бр╕зр╣Ир╕▓ 3 (р╕лр╕▓р╣Др╕бр╣Ир╣Ар╕Ир╕н! ЁЯШЕ)"),
    }

    // any р╣Бр╕ер╕░ all (р╕Щр╕▒р╕Бр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ! ЁЯСотАНтЩВя╕П)
    let has_even = numbers.iter().any(|&x| x % 2 == 0);  // р╕бр╕╡р╣Ар╕ер╕Вр╕Др╕╣р╣Ир╕бр╕▒р╣Йр╕в? ЁЯдФ
    let all_positive = numbers.iter().all(|&x| x > 0);  // р╣Ар╕Ыр╣Зр╕Щр╕Ър╕зр╕Бр╕лр╕бр╕Фр╕бр╕▒р╣Йр╕в? ЁЯдФ
    println!("тЭУ р╕бр╕╡р╣Ар╕ер╕Вр╕Др╕╣р╣Ир╕лр╕гр╕╖р╕нр╣Др╕бр╣И: {has_even} (р╕Хр╕гр╕зр╕Ир╣Бр╕ер╣Йр╕з! ЁЯУЛ)");
    println!("тЭУ р╣Ар╕Ыр╣Зр╕Щр╣Ар╕ер╕Вр╕Ър╕зр╕Бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕лр╕гр╕╖р╕нр╣Др╕бр╣И: {all_positive} (р╣Ар╕Кр╣Зр╕Др╣Бр╕ер╣Йр╕з! тЬЕ)");

    // Closure types: Fn, FnMut, FnOnce (р╕Хр╕гр╕░р╕Бр╕╣р╕ер╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Щр╕┤р╕гр╕Щр╕▓р╕б! ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж)
    println!("\nЁЯОн Closure Types: р╕Др╕гр╕нр╕Ър╕Др╕гр╕▒р╕зр╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Щр╕┤р╕гр╕Щр╕▓р╕б!");

    // Fn - р╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕гр╕╡р╕вр╕Бр╣Др╕Фр╣Йр╕лр╕ер╕▓р╕вр╕Др╕гр╕▒р╣Йр╕З, р╣Др╕бр╣Ир╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Бр╕Ыр╕ер╕З captured values (р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕кр╕╕р╕ар╕▓р╕Ю! ЁЯОй)
    let multiplier = 3;  // р╕Хр╕▒р╕зр╣Бр╕Ыр╕гр╕Чр╕╡р╣Ир╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в! ЁЯФТ
    let multiply_by_three = |x| x * multiplier;  // р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Чр╕╡р╣Ир╣Др╕бр╣Ир╕Чр╕│р╕гр╣Йр╕▓р╕вр╣Гр╕Др╕г! ЁЯШЗ
    println!("ЁЯФв multiply_by_three(4) = {} (р╣Ар╕гр╕╡р╕вр╕Бр╕Др╕гр╕▒р╣Йр╕Зр╣Бр╕гр╕Б! 1я╕ПтГг)", multiply_by_three(4));
    println!("ЁЯФв multiply_by_three(7) = {} (р╣Ар╕гр╕╡р╕вр╕Бр╕Др╕гр╕▒р╣Йр╕Зр╕Чр╕╡р╣Ир╕кр╕нр╕З! 2я╕ПтГг)", multiply_by_three(7)); // р╣Ар╕гр╕╡р╕вр╕Бр╣Др╕Фр╣Йр╕нр╕╡р╕Б (р╣Др╕бр╣Ир╕бр╕╡р╕Ыр╕▒р╕Нр╕лр╕▓! тЬЕ)

    // FnMut - р╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕гр╕╡р╕вр╕Бр╣Др╕Фр╣Йр╕лр╕ер╕▓р╕вр╕Др╕гр╕▒р╣Йр╕З, р╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Бр╕Ыр╕ер╕З captured values р╣Др╕Фр╣Й (р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Щр╕▒р╕Бр╣Бр╕Бр╣Йр╣Др╕В! тЬПя╕П)
    let mut counter = 0;  // р╕Хр╕▒р╕зр╕Щр╕▒р╕Ър╕Чр╕╡р╣Ир╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Др╕Фр╣Й! ЁЯФД
    let mut increment = || {  // р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Щр╕▒р╕Бр╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕З! ЁЯФз
        counter += 1;  // р╣Ар╕Юр╕┤р╣Ир╕бр╕Др╣Ир╕▓! тмЖя╕П
        counter
    };
    println!("ЁЯУК increment() = {} (р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕Др╕гр╕▒р╣Йр╕Зр╣Бр╕гр╕Б! ЁЯЫая╕П)", increment());
    println!("ЁЯУК increment() = {} (р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕Др╕гр╕▒р╣Йр╕Зр╕Чр╕╡р╣Ир╕кр╕нр╕З! ЁЯФи)", increment()); // р╕вр╕▒р╕Зр╣Бр╕Бр╣Йр╣Др╕Вр╣Др╕Фр╣Й! ЁЯОи

    // FnOnce - р╣Ар╕гр╕╡р╕вр╕Бр╣Др╕Фр╣Йр╕Др╕гр╕▒р╣Йр╕Зр╣Ар╕Фр╕╡р╕вр╕з, р╕нр╕▓р╕И move captured values (р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Др╕гр╕▒р╣Йр╕Зр╣Ар╕Фр╕╡р╕вр╕з! ЁЯТе)
    let message = String::from("Hello");  // р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕╡р╣Ир╕Ир╕░р╕лр╕▓р╕вр╣Др╕Ы! ЁЯС╗
    let consume = || {  // р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╣Бр╕Ър╕Ър╣Гр╕Кр╣Йр╣Бр╕ер╣Йр╕зр╕Чр╕┤р╣Йр╕З! ЁЯЧСя╕П
        println!("ЁЯУЭ {message} (р╕Др╕гр╕▒р╣Йр╕Зр╣Бр╕гр╕Бр╣Бр╕ер╕░р╕Др╕гр╕▒р╣Йр╕Зр╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕в! ЁЯОм)");
        message // move message out (р╕вр╣Йр╕▓р╕вр╕нр╕нр╕Бр╣Др╕Ы! ЁЯУж)
    };
    let _consumed = consume();  // р╣Ар╕гр╕╡р╕вр╕Бр╣Гр╕Кр╣Йр╣Ар╕Юр╕╡р╕вр╕Зр╕Др╕гр╕▒р╣Йр╕Зр╣Ар╕Фр╕╡р╕вр╕з! тЪб
    // consume(); // Error! р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕гр╕╡р╕вр╕Бр╕нр╕╡р╕Бр╕Др╕гр╕▒р╣Йр╕Зр╣Др╕Фр╣Й (р╕лр╕бр╕Фр╣Бр╕ер╣Йр╕з! ЁЯЪл)

    println!("\nЁЯОЙ р╕Ир╕Ър╕Бр╕▓р╕гр╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Й Closures! (р╕Ир╕Ър╕Бр╕▓р╕гр╣Бр╕кр╕Фр╕Зр╣Бр╕ер╣Йр╕з! ЁЯОнЁЯОЙ)");
}
