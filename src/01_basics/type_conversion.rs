//! Type Conversion Module - р╕Бр╕▓р╕гр╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Йр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕Бр╕▓р╕гр╣Бр╕Ыр╕ер╕Зр╕Кр╕Щр╕┤р╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕Щ Rust (р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Бр╕▓р╕гр╣Бр╕Ыр╕ер╕Зр╕гр╣Ир╕▓р╕Зр╕Вр╕нр╕З Transformer! ЁЯдЦ)

/// р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Й Type Conversion (р╕бр╕▓р╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Йр╕Бр╕▓р╕гр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕Кр╕╕р╕Фр╕Вр╕нр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е! ЁЯСЧтЮбя╕ПЁЯСФ)
///
/// # Panics
/// 
/// р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Щр╕╡р╣Йр╕Ир╕░ panic р╕лр╕▓р╕Бр╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Бр╕Ыр╕ер╕З string "42" р╣Ар╕Ыр╣Зр╕Щ i32 р╣Др╕Фр╣Й
pub fn learn_type_conversion() {
    println!("\nЁЯФД === Type Conversion: р╕ир╕┤р╕ер╕Ыр╕░р╕Бр╕▓р╕гр╣Бр╕Ыр╕ер╕Зр╕гр╣Ир╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е! === ЁЯФД");

    // Explicit casting (as keyword) (р╕Бр╕▓р╕гр╕Ър╕▒р╕Зр╕Др╕▒р╕Ър╣Гр╕лр╣Йр╣Бр╕Ыр╕ер╕Зр╕гр╣Ир╕▓р╕З! ЁЯОн)
    println!("ЁЯОп === Explicit Casting: р╕Бр╕▓р╕гр╣Бр╕Ыр╕ер╕Зр╕гр╣Ир╕▓р╕Зр╣Бр╕Ър╕Ър╕Ър╕▒р╕Зр╕Др╕▒р╕Ъ! === ЁЯОп");

    let integer = 42;
    let float = f64::from(integer); // р╣Бр╕Ыр╕ер╕Зр╕Ир╕▓р╕Бр╕Ир╕│р╕Щр╕зр╕Щр╣Ар╕Хр╣Зр╕бр╣Ар╕Ыр╣Зр╕Щр╕Чр╕ир╕Щр╕┤р╕вр╕б (р╣Ар╕лр╕бр╕╖р╕нр╕Щр╣Ар╕Юр╕┤р╣Ир╕бр╕Ир╕╕р╕Фр╣Гр╕лр╣Йр╕Хр╕▒р╕зр╣Ар╕ер╕В! ЁЯУН)
    #[allow(clippy::cast_possible_truncation, clippy::cast_sign_loss)]
    let byte = integer as u8; // р╕Ър╕╡р╕Ър╣Гр╕лр╣Йр╣Ар╕ер╣Зр╕Бр╕ер╕З (р╣Ар╕лр╕бр╕╖р╕нр╕Щр╣Гр╕кр╣Ир╣Ар╕кр╕╖р╣Йр╕нр╣Др╕Лр╕кр╣М S! ЁЯСХ)

    println!("ЁЯФв integer (i32): {integer} (р╕Хр╕▒р╕зр╣Ар╕ер╕Вр╣Ар╕Хр╣Зр╕бр╣Ж! ЁЯТк)");
    println!("ЁЯФв float (f64): {float} (р╕Хр╕▒р╕зр╣Ар╕ер╕Вр╕Чр╕╡р╣Ир╕бр╕╡р╕Ир╕╕р╕Фр╕Чр╕ир╕Щр╕┤р╕вр╕б! ЁЯОп)");
    println!("ЁЯФв byte (u8): {byte} (р╕Хр╕▒р╕зр╣Ар╕ер╕Вр╕Вр╕Щр╕▓р╕Фр╕бр╕┤р╕Щр╕┤! ЁЯРн)");

    // Casting р╕гр╕░р╕лр╕зр╣Ир╕▓р╕З numeric types (р╕Бр╕▓р╕гр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕Вр╕Щр╕▓р╕Фр╕Хр╕▒р╕зр╣Ар╕ер╕В! ЁЯУП)
    let big_number: i64 = 1000;
    #[allow(clippy::cast_possible_truncation, clippy::cast_sign_loss)]
    let small_number = big_number as i32; // р╕ер╕Фр╕Вр╕Щр╕▓р╕Фр╕ер╕З (р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Бр╕▓р╕гр╕ер╕Фр╕Щр╣Йр╕│р╕лр╕Щр╕▒р╕Б! ЁЯПГтАНтЩВя╕П)
    #[allow(clippy::cast_possible_truncation, clippy::cast_sign_loss)]
    let unsigned_number = big_number as u32; // р╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Ар╕Ыр╣Зр╕Щр╕Ър╕зр╕Бр╣Ар╕Чр╣Ир╕▓р╕Щр╕▒р╣Йр╕Щ (р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Др╕┤р╕Фр╕Ър╕зр╕Б! ЁЯШК)

    println!("\nЁЯУК big_number (i64): {big_number} (р╕Хр╕▒р╕зр╣Ар╕ер╕Вр╕вр╕▒р╕Бр╕йр╣М! ЁЯжг)");
    println!("ЁЯУК small_number (i32): {small_number} (р╕Хр╕▒р╕зр╣Ар╕ер╕Вр╕Вр╕Щр╕▓р╕Фр╕Бр╕ер╕▓р╕З! ЁЯРШ)");
    println!("ЁЯУК unsigned_number (u32): {unsigned_number} (р╕Хр╕▒р╕зр╣Ар╕ер╕Вр╕Чр╕╡р╣Ир╕Др╕┤р╕Фр╕Ър╕зр╕Бр╣Ар╕кр╕бр╕н! ЁЯМЮ)");

    // Parsing strings (р╕Бр╕▓р╕гр╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╣Ар╕Ыр╣Зр╕Щр╕Хр╕▒р╕зр╣Ар╕ер╕В! ЁЯФдтЮбя╕ПЁЯФв)
    println!("\nЁЯУЭ === String Parsing: р╕Щр╕▒р╕Бр╣Бр╕Ыр╕ер╕ар╕▓р╕йр╕▓р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б! === ЁЯУЭ");

    let number_str = "42";
    let parsed_int: i32 = number_str.parse().expect("р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Бр╕Ыр╕ер╕Зр╣Ар╕Ыр╣Зр╕Щр╕Хр╕▒р╕зр╣Ар╕ер╕В (р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Щр╕╡р╣Йр╣Др╕бр╣Ир╣Гр╕Кр╣Ир╕Хр╕▒р╕зр╣Ар╕ер╕В! ЁЯШ╡)");

    println!("ЁЯУД string: '{number_str}' (р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕╡р╣Ир╣Бр╕Эр╕Зр╕Хр╕▒р╕зр╣Ар╕ер╕В! ЁЯХ╡я╕П)");
    println!("ЁЯФв parsed integer: {parsed_int} (р╕Хр╕▒р╕зр╣Ар╕ер╕Вр╕Чр╕╡р╣Ир╣Бр╕Ыр╕ер╕Зр╕кр╕│р╣Ар╕гр╣Зр╕И! тЬи)");

    // Parsing р╕Бр╕▒р╕Ъ error handling (р╕Бр╕▓р╕гр╣Бр╕Ыр╕ер╕Зр╣Бр╕Ър╕Ър╕гр╕░р╕зр╕▒р╕Зр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф! ЁЯЫбя╕П)
    let float_str = "3.14";
    match float_str.parse::<f64>() {
        Ok(num) => println!("тЬЕ р╣Бр╕Ыр╕ер╕З '{float_str}' р╣Ар╕Ыр╣Зр╕Щ float: {num} (р╕кр╕│р╣Ар╕гр╣Зр╕И! р╣Ар╕лр╕бр╕╖р╕нр╕Щр╣Др╕Фр╣Йр╕Др╣Ир╕▓ Pi! ЁЯез)"),
        Err(e) => println!("тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Бр╕Ыр╕ер╕З: {e} (р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з! ЁЯШв)"),
    }

    let invalid_str = "abc";
    match invalid_str.parse::<i32>() {
        Ok(num) => println!("тЬЕ р╣Бр╕Ыр╕ер╕З '{invalid_str}' р╣Ар╕Ыр╣Зр╕Щ integer: {num} (р╕бр╕лр╕▒р╕ир╕Ир╕гр╕гр╕вр╣М! ЁЯОйтЬи)"),
        Err(e) => println!("тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Бр╕Ыр╕ер╕З '{invalid_str}': {e} (р╕Хр╕▒р╕зр╕нр╕▒р╕Бр╕йр╕гр╣Др╕бр╣Ир╣Гр╕Кр╣Ир╕Хр╕▒р╕зр╣Ар╕ер╕В! ЁЯд╖тАНтЩВя╕П)"),
    }

    // Converting to string (р╕Бр╕▓р╕гр╣Бр╕Ыр╕ер╕Зр╕Чр╕╕р╕Бр╕нр╕вр╣Ир╕▓р╕Зр╣Ар╕Ыр╣Зр╕Щр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б! ЁЯФвтЮбя╕ПЁЯУЭ)
    println!("\nЁЯУЭ === Converting to String: р╕Щр╕▒р╕Бр╣Ар╕Вр╕╡р╕вр╕Щр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б! === ЁЯУЭ");

    let num = 123;
    let num_string = num.to_string(); // р╣Бр╕Ыр╕ер╕Зр╕Хр╕▒р╕зр╣Ар╕ер╕Вр╣Ар╕Ыр╣Зр╕Щр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б (р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Бр╕▓р╕гр╣Ар╕Вр╕╡р╕вр╕Щр╕Хр╕▒р╕зр╣Ар╕ер╕Вр╕Ър╕Щр╕Бр╕гр╕░р╕Фр╕▓р╕й! ЁЯУЭ)
    let formatted = format!("р╕Хр╕▒р╕зр╣Ар╕ер╕В: {num}"); // р╕Ир╕▒р╕Фр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б (р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Бр╕▓р╕гр╣Бр╕Хр╣Ир╕Зр╕лр╕Щр╣Йр╕▓р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б! ЁЯТД)

    println!("ЁЯФв number: {num} (р╕Хр╕▒р╕зр╣Ар╕ер╕Вр╕Фр╕┤р╕Ър╣Ж! ЁЯей)");
    println!("ЁЯУД to_string(): '{num_string}' (р╕Хр╕▒р╕зр╣Ар╕ер╕Вр╕Чр╕╡р╣Ир╕Бр╕ер╕▓р╕вр╣Ар╕Ыр╣Зр╕Щр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б! ЁЯОн)");
    println!("ЁЯУД format!(): '{formatted}' (р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕╡р╣Ир╣Бр╕Хр╣Ир╕Зр╕Хр╕▒р╕зр╣Бр╕ер╣Йр╕з! ЁЯСЧ)");

    // Boolean conversion (р╕Бр╕▓р╕гр╣Бр╕Ыр╕ер╕Зр╕Др╕зр╕▓р╕бр╕Ир╕гр╕┤р╕З-р╣Ар╕Чр╣Зр╕И! тЬЕтЭМ)
    let bool_val = true;
    let bool_string = bool_val.to_string(); // р╣Бр╕Ыр╕ер╕Зр╕Ър╕╣р╕ер╕╡р╕Щр╣Ар╕Ыр╣Зр╕Щр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б (р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Бр╕▓р╕гр╕Ър╕нр╕Бр╕Др╕зр╕▓р╕бр╕Ир╕гр╕┤р╕З! ЁЯЧгя╕П)
    println!("\nтЬЕ boolean: {bool_val} (р╕Др╕зр╕▓р╕бр╕Ир╕гр╕┤р╕Зр╣Бр╕Чр╣Й! ЁЯТО)");
    println!("ЁЯУД boolean as string: '{bool_string}' (р╕Др╕зр╕▓р╕бр╕Ир╕гр╕┤р╕Зр╣Гр╕Щр╕гр╕╣р╕Ыр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б! ЁЯУЬ)");

    println!("\nЁЯОЙ р╕Ир╕Ър╕Бр╕▓р╕гр╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Й Type Conversion! (р╕Хр╕нр╕Щр╕Щр╕╡р╣Йр╕Др╕╕р╕Ур╣Ар╕Ыр╣Зр╕Щр╕Щр╕▒р╕Бр╣Бр╕Ыр╕ер╕Зр╕гр╣Ир╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕ер╣Йр╕з! ЁЯж╕тАНтЩВя╕ПтЬи)");
}
