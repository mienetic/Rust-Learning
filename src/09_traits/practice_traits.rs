/// р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Эр╕╢р╕Бр╕Эр╕Щ Traits
/// р╕бр╕▓р╕Эр╕╢р╕Бр╕Эр╕Щр╕Бр╕▓р╕гр╣Гр╕Кр╣Й Traits р╕Бр╕▒р╕Щр╣Ар╕Цр╕нр╕░! р╣Ар╕лр╕бр╕╖р╕нр╕Щр╣Др╕Ыр╕вр╕┤р╕бр╕Эр╕╢р╕Бр╕Бр╕ер╣Йр╕▓р╕бр╣Ар╕Щр╕╖р╣Йр╕нр╣Бр╕Хр╣Ир╕кр╕│р╕лр╕гр╕▒р╕Ър╕кр╕бр╕нр╕Зр╣Бр╕Ър╕Ъ brain gym! ЁЯзаЁЯТк
#[allow(clippy::too_many_lines)]
pub fn practice_traits() {
    println!("\nЁЯТк === р╣Бр╕Ър╕Ър╕Эр╕╢р╕Бр╕лр╕▒р╕Ф Traits: р╕вр╕┤р╕бр╕кр╕│р╕лр╕гр╕▒р╕Ър╣Вр╕Ыр╕гр╣Бр╕Бр╕гр╕бр╣Ар╕бр╕нр╕гр╣Мр╣Бр╕Ър╕Ъ programmer's gym! === ЁЯТк");
    println!("ЁЯПЛя╕П р╣Ар╕Хр╕гр╕╡р╕вр╕бр╕Хр╕▒р╕зр╕Эр╕╢р╕Бр╕Эр╕Щр╕Чр╕▒р╕Бр╕йр╕░ Traits р╕Бр╕▒р╕Щр╣Ар╕Цр╕нр╕░! р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Щр╕▒р╕Бр╕Бр╕╡р╕мр╕▓р╕Чр╕╡р╣Ир╕Эр╕╢р╕Бр╕Лр╣Йр╕нр╕бр╣Бр╕Ър╕Ъ skill training! ЁЯОпЁЯФе");

    // 1. Animal Trait System - р╕гр╕░р╕Ър╕Ър╕кр╕▒р╕Хр╕зр╣Мр╣Вр╕ер╕Бр╣Бр╕Ър╕Ъ animal kingdom system!
    trait Animal {
        fn name(&self) -> &str;        // р╕Кр╕╖р╣Ир╕нр╕Чр╕╡р╣Ир╣Ар╕гр╕╡р╕вр╕Бр╕Вр╕▓р╕Щр╣Бр╕Ър╕Ъ calling name!
        fn make_sound(&self) -> String; // р╣Ар╕кр╕╡р╕вр╕Зр╕Чр╕╡р╣Ир╕кр╣Ир╕Зр╕нр╕нр╕Бр╣Бр╕Ър╕Ъ sound output!
        fn age(&self) -> u32;           // р╕нр╕▓р╕вр╕╕р╕Чр╕╡р╣Ир╕Щр╕▒р╕Ър╣Др╕Фр╣Йр╣Бр╕Ър╕Ъ countable age!

        fn introduce(&self) -> String {
            // р╣Бр╕Щр╕░р╕Щр╕│р╕Хр╕▒р╕зр╣Ар╕нр╕Зр╣Бр╕Ър╕Ър╕кр╕╕р╕ар╕▓р╕Ю - р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Бр╕▓р╕гр╕Чр╕▒р╕Бр╕Чр╕▓р╕вр╣Гр╕Щр╕Зр╕▓р╕Щр╕Ыр╕▓р╕гр╣Мр╕Хр╕╡р╣Йр╣Бр╕Ър╕Ъ party introduction!
            format!("р╕кр╕зр╕▒р╕кр╕Фр╕╡! р╕Йр╕▒р╕Щр╕Кр╕╖р╣Ир╕н {} р╕нр╕▓р╕вр╕╕ {} р╕Ыр╕╡ (р╕вр╕┤р╕Щр╕Фр╕╡р╕Чр╕╡р╣Ир╣Др╕Фр╣Йр╕гр╕╣р╣Йр╕Ир╕▒р╕Бр╣Бр╕Ър╕Ъ nice to meet you!)", self.name(), self.age())
        }

        fn speak(&self) -> String {
            // р╕Юр╕╣р╕Фр╕Др╕╕р╕вр╣Бр╕Ър╕Ър╕бр╕╡р╣Ар╕кр╕╡р╕вр╕З - р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Щр╕▒р╕Бр╕Юр╕▓р╕Бр╕вр╣Мр╕Чр╕╡р╣Ир╣Гр╕кр╣Ир╣Ар╕кр╕╡р╕вр╕Зр╣Гр╕лр╣Йр╕Хр╕▒р╕зр╕ер╕░р╕Др╕гр╣Бр╕Ър╕Ъ voice actor!
            format!("{} р╕Юр╕╣р╕Фр╕зр╣Ир╕▓: {} (р╣Ар╕кр╕╡р╕вр╕Зр╕Чр╕╡р╣Ир╣Др╕Юр╣Ар╕гр╕▓р╕░р╣Бр╕Ър╕Ъ melodious voice!)", self.name(), self.make_sound())
        }
    }

    trait Mammal: Animal {
        fn fur_color(&self) -> &str;    // р╕кр╕╡р╕Вр╕Щр╕Чр╕╡р╣Ир╕кр╕зр╕вр╕Зр╕▓р╕бр╣Бр╕Ър╕Ъ beautiful fur color!

        fn describe_fur(&self) -> String {
            // р╕нр╕Шр╕┤р╕Ър╕▓р╕вр╕Вр╕Щр╣Бр╕Ър╕Ър╕Щр╕▒р╕Бр╣Бр╕Яр╕Кр╕▒р╣Ир╕Щ - р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Щр╕▒р╕Бр╕нр╕нр╕Бр╣Бр╕Ър╕Ър╕Чр╕╡р╣Ир╕Ър╕гр╕гр╕вр╕▓р╕вр╣Ар╕кр╕╖р╣Йр╕нр╕Ьр╣Йр╕▓р╣Бр╕Ър╕Ъ fashion designer!
            format!("{} р╕бр╕╡р╕Вр╕Щр╕кр╕╡{} (р╕кр╕зр╕вр╕Зр╕▓р╕бр╣Бр╕Ър╕Ъ gorgeous fur!)", self.name(), self.fur_color())
        }
    }

    struct Dog {
        name: String,      // р╕Кр╕╖р╣Ир╕нр╕кр╕╕р╕Щр╕▒р╕Вр╕Чр╕╡р╣Ир╕Щр╣Ир╕▓р╕гр╕▒р╕Бр╣Бр╕Ър╕Ъ adorable dog name!
        age: u32,          // р╕нр╕▓р╕вр╕╕р╕Чр╕╡р╣Ир╕Щр╕▒р╕Ър╣Ар╕Ыр╣Зр╕Щр╕Ыр╕╡р╕кр╕╕р╕Щр╕▒р╕Вр╣Бр╕Ър╕Ъ dog years!
        // Field р╕Щр╕╡р╣Йр╣Гр╕Кр╣Йр╣Ар╕Юр╕╖р╣Ир╕нр╣Бр╕кр╕Фр╕Зр╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕▓р╕вр╕Юр╕▒р╕Щр╕Шр╕╕р╣Мр╕кр╕╕р╕Щр╕▒р╕В - р╣Ар╕лр╕бр╕╖р╕нр╕Щр╣Гр╕Ър╕Ыр╕гр╕░р╕Бр╕▓р╕ир╕Щр╕╡р╕вр╕Ър╕▒р╕Хр╕гр╣Бр╕Ър╕Ъ pedigree certificate!
        // Warning: field р╣Др╕бр╣Ир╕Цр╕╣р╕Бр╣Гр╕Кр╣Йр╣Ар╕Юр╕гр╕▓р╕░р╣Ар╕Ыр╣Зр╕Щр╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Бр╕▓р╕гр╕кр╕▓р╕Шр╕┤р╕Х
        #[allow(dead_code)]
        breed: String,     // р╕кр╕▓р╕вр╕Юр╕▒р╕Щр╕Шр╕╕р╣Мр╕Чр╕╡р╣Ир╕бр╕╡р╣Ар╕Бр╕╡р╕вр╕гр╕Хр╕┤р╣Бр╕Ър╕Ъ noble breed!
        fur_color: String, // р╕кр╕╡р╕Вр╕Щр╕Чр╕╡р╣Ир╣Ар╕Ыр╣Зр╕Щр╣Ар╕нр╕Бр╕ер╕▒р╕Бр╕йр╕Ур╣Мр╣Бр╕Ър╕Ъ signature fur color!
    }

    impl Animal for Dog {
        fn name(&self) -> &str {
            // р╕кр╣Ир╕Зр╕Др╕╖р╕Щр╕Кр╕╖р╣Ир╕нр╣Бр╕Ър╕Ър╕ар╕╣р╕бр╕┤р╣Гр╕И - р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Бр╕▓р╕гр╣Бр╕Щр╕░р╕Щр╕│р╕Хр╕▒р╕зр╣Ар╕нр╕Зр╣Бр╕Ър╕Ъ proud self-introduction!
            &self.name
        }

        fn make_sound(&self) -> String {
            // р╣Ар╕кр╕╡р╕вр╕Зр╣Ар╕лр╣Ир╕▓р╣Бр╕Ър╕Ър╕Др╕ер╕▓р╕кр╕кр╕┤р╕Б - р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Щр╕▒р╕Бр╕гр╣Йр╕нр╕Зр╕Чр╕╡р╣Ир╕бр╕╡р╣Ар╕Юр╕ер╕Зр╕Ыр╕гр╕░р╕Ир╕│р╕Хр╕▒р╕зр╣Бр╕Ър╕Ъ signature song!
            String::from("р╣Вр╕ор╣Ир╕З р╣Вр╕ор╣Ир╕З! (р╣Ар╕кр╕╡р╕вр╕Зр╕Чр╕╡р╣Ир╕Фр╕▒р╕Зр╣Гр╕кр╣Бр╕Ър╕Ъ clear bark!)")
        }

        fn age(&self) -> u32 {
            // р╕кр╣Ир╕Зр╕Др╕╖р╕Щр╕нр╕▓р╕вр╕╕р╣Бр╕Ър╕Ър╕Хр╕гр╕Зр╣Др╕Ыр╕Хр╕гр╕Зр╕бр╕▓ - р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Бр╕▓р╕гр╕Ър╕нр╕Бр╕нр╕▓р╕вр╕╕р╕Ир╕гр╕┤р╕Зр╣Бр╕Ър╕Ъ honest age!
            self.age
        }
    }

    impl Mammal for Dog {
        fn fur_color(&self) -> &str {
            // р╕кр╣Ир╕Зр╕Др╕╖р╕Щр╕кр╕╡р╕Вр╕Щр╣Бр╕Ър╕Ър╕ар╕▓р╕Др╕ар╕╣р╕бр╕┤р╣Гр╕И - р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Бр╕▓р╕гр╣Вр╕Кр╕зр╣Мр╕кр╕╡р╕Ьр╕бр╣Гр╕лр╕бр╣Ир╣Бр╕Ър╕Ъ hair color reveal!
            &self.fur_color
        }
    }

    struct Cat {
        name: String,      // р╕Кр╕╖р╣Ир╕нр╣Бр╕бр╕зр╕Чр╕╡р╣Ир╕лр╕гр╕╣р╕лр╕гр╕▓р╣Бр╕Ър╕Ъ elegant cat name!
        age: u32,          // р╕нр╕▓р╕вр╕╕р╕Чр╕╡р╣Ир╕Щр╕▒р╕Ър╣Ар╕Ыр╣Зр╕Щр╕Ыр╕╡р╣Бр╕бр╕зр╣Бр╕Ър╕Ъ cat years!
        // Field р╕Щр╕╡р╣Йр╣Гр╕Кр╣Йр╣Ар╕Юр╕╖р╣Ир╕нр╣Бр╕кр╕Фр╕Зр╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕бр╕зр╣Гр╕Щр╕Ър╣Йр╕▓р╕Щ/р╕Щр╕нр╕Бр╕Ър╣Йр╕▓р╕Щ - р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕кр╕Цр╕▓р╕Щр╕░р╕Чр╕╡р╣Ир╕нр╕вр╕╣р╣Ир╕нр╕▓р╕ир╕▒р╕вр╣Бр╕Ър╕Ъ residence status!
        // Warning: field р╣Др╕бр╣Ир╕Цр╕╣р╕Бр╣Гр╕Кр╣Йр╣Ар╕Юр╕гр╕▓р╕░р╣Ар╕Ыр╣Зр╕Щр╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Бр╕▓р╕гр╕кр╕▓р╕Шр╕┤р╕Х
        #[allow(dead_code)]
        indoor: bool,      // р╕кр╕Цр╕▓р╕Щр╕░р╕нр╕вр╕╣р╣Ир╣Гр╕Щр╕Ър╣Йр╕▓р╕Щр╣Бр╕Ър╕Ъ indoor lifestyle!
        fur_color: String, // р╕кр╕╡р╕Вр╕Щр╕Чр╕╡р╣Ир╣Ар╕Ыр╣Зр╕Щр╣Ар╕нр╕Бр╕ер╕▒р╕Бр╕йр╕Ур╣Мр╣Бр╕Ър╕Ъ signature fur color!
    }

    impl Animal for Cat {
        fn name(&self) -> &str {
            // р╕кр╣Ир╕Зр╕Др╕╖р╕Щр╕Кр╕╖р╣Ир╕нр╣Бр╕Ър╕Ър╕кр╕Зр╣Ир╕▓р╕Зр╕▓р╕б - р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Бр╕▓р╕гр╣Бр╕Щр╕░р╕Щр╕│р╕Хр╕▒р╕зр╣Ар╕нр╕Зр╣Бр╕Ър╕Ъ graceful introduction!
            &self.name
        }

        fn make_sound(&self) -> String {
            // р╣Ар╕кр╕╡р╕вр╕Зр╣Ар╕лр╕бр╕╡р╕вр╕зр╣Бр╕Ър╕Ър╕Щр╣Ир╕▓р╕гр╕▒р╕Б - р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Щр╕▒р╕Бр╕гр╣Йр╕нр╕Зр╣Вр╕нр╣Ар╕Ыр╕гр╣Ир╕▓р╣Бр╕бр╕зр╣Бр╕Ър╕Ъ cat opera singer!
            String::from("р╣Ар╕лр╕бр╕╡р╕вр╕з р╣Ар╕лр╕бр╕╡р╕вр╕з! (р╣Ар╕кр╕╡р╕вр╕Зр╕Чр╕╡р╣Ир╕Щр╕╕р╣Ир╕бр╕Щр╕зр╕ер╣Бр╕Ър╕Ъ soft meow!)")
        }

        fn age(&self) -> u32 {
            // р╕кр╣Ир╕Зр╕Др╕╖р╕Щр╕нр╕▓р╕вр╕╕р╣Бр╕Ър╕Ър╕ер╕╢р╕Бр╕ер╕▒р╕Ъ - р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕кр╕╕р╕ар╕▓р╕Юр╕кр╕Хр╕гр╕╡р╕Чр╕╡р╣Ир╣Др╕бр╣Ир╕Ър╕нр╕Бр╕нр╕▓р╕вр╕╕р╣Бр╕Ър╕Ъ mysterious age!
            self.age
        }
    }

    impl Mammal for Cat {
        fn fur_color(&self) -> &str {
            // р╕кр╣Ир╕Зр╕Др╕╖р╕Щр╕кр╕╡р╕Вр╕Щр╣Бр╕Ър╕Ър╕лр╕гр╕╣р╕лр╕гр╕▓ - р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Бр╕▓р╕гр╣Вр╕Кр╕зр╣Мр╣Ар╕кр╕╖р╣Йр╕нр╕Ьр╣Йр╕▓р╣Бр╕Ър╕гр╕Щр╕Фр╣Мр╣Ар╕Щр╕бр╣Бр╕Ър╕Ъ luxury fashion show!
            &self.fur_color
        }
    }

    println!("\nЁЯР╛ === р╕гр╕░р╕Ър╕Ър╕кр╕▒р╕Хр╕зр╣М: р╕кр╕зр╕Щр╕кр╕▒р╕Хр╕зр╣Мр╕Фр╕┤р╕Ир╕┤р╕Чр╕▒р╕ер╣Бр╕Ър╕Ъ digital zoo! === ЁЯР╛");
    println!("ЁЯжБ р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕кр╕зр╕Щр╕кр╕▒р╕Хр╕зр╣Мр╕Чр╕╡р╣Ир╕кр╕▒р╕Хр╕зр╣Мр╕Чр╕╕р╕Бр╕Хр╕▒р╕зр╕бр╕╡р╕Ър╕╕р╕Др╕ер╕┤р╕Бр╣Ар╕Йр╕Юр╕▓р╕░р╕Хр╕▒р╕зр╣Бр╕Ър╕Ъ unique personality zoo! ЁЯОкЁЯМЯ");

    let dog = Dog {
        name: String::from("р╕Ър╕▒р╕Фр╕Фр╕╡р╣Й"),                        // р╕Кр╕╖р╣Ир╕нр╕Чр╕╡р╣Ир╣Ар╕Ыр╣Зр╕Щр╕бр╕┤р╕Хр╕гр╣Бр╕Ър╕Ъ friendly name!
        age: 3,                                            // р╕нр╕▓р╕вр╕╕р╕зр╕▒р╕вр╕гр╕╕р╣Ир╕Щр╣Бр╕Ър╕Ъ teenage years!
        breed: String::from("р╣Вр╕Бр╕ер╣Ар╕Фр╣Йр╕Щ р╕гр╕╡р╕Чр╕гр╕╡р╕Яр╣Ар╕зр╕нр╕гр╣М"),          // р╕кр╕▓р╕вр╕Юр╕▒р╕Щр╕Шр╕╕р╣Мр╕Чр╕╡р╣Ир╕Фр╕╡р╣Бр╕Ър╕Ъ premium breed!
        fur_color: String::from("р╕Чр╕нр╕З"),                    // р╕кр╕╡р╕Чр╕нр╕Зр╣Бр╕Ър╕Ъ golden color!
    };

    let cat = Cat {
        name: String::from("р╕зр╕┤р╕кр╕Бр╕╡р╣Й"),                       // р╕Кр╕╖р╣Ир╕нр╕Чр╕╡р╣Ир╕лр╕гр╕╣р╕лр╕гр╕▓р╣Бр╕Ър╕Ъ classy name!
        age: 2,                                            // р╕нр╕▓р╕вр╕╕р╕зр╕▒р╕вр╣Ар╕Фр╣Зр╕Бр╣Бр╕Ър╕Ъ young age!
        indoor: true,                                      // р╣Бр╕бр╕зр╕Ър╣Йр╕▓р╕Щр╣Бр╕Ър╕Ъ house cat!
        fur_color: String::from("р╕кр╣Йр╕б"),                    // р╕кр╕╡р╕кр╣Йр╕бр╣Бр╕Ър╕Ъ orange color!
    };

    println!("ЁЯРХ {}", dog.introduce());     // р╕кр╕╕р╕Щр╕▒р╕Вр╣Бр╕Щр╕░р╕Щр╕│р╕Хр╕▒р╕зр╣Бр╕Ър╕Ъ dog introduction!
    println!("ЁЯРХ {}", dog.speak());         // р╕кр╕╕р╕Щр╕▒р╕Вр╕Юр╕╣р╕Фр╣Бр╕Ър╕Ъ dog speech!
    println!("ЁЯРХ {}", dog.describe_fur());  // р╕кр╕╕р╕Щр╕▒р╕Вр╕нр╕Шр╕┤р╕Ър╕▓р╕вр╕Вр╕Щр╣Бр╕Ър╕Ъ fur description!

    println!("\nЁЯР▒ {}", cat.introduce());     // р╣Бр╕бр╕зр╣Бр╕Щр╕░р╕Щр╕│р╕Хр╕▒р╕зр╣Бр╕Ър╕Ъ cat introduction!
    println!("ЁЯР▒ {}", cat.speak());         // р╣Бр╕бр╕зр╕Юр╕╣р╕Фр╣Бр╕Ър╕Ъ cat speech!
    println!("ЁЯР▒ {}", cat.describe_fur());  // р╣Бр╕бр╕зр╕нр╕Шр╕┤р╕Ър╕▓р╕вр╕Вр╕Щр╣Бр╕Ър╕Ъ fur description!

    // 2. Drawable Trait with different implementations - р╕гр╕░р╕Ър╕Ър╕зр╕▓р╕Фр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ъ digital art system!
    trait Drawable {
        fn draw(&self) -> String;       // р╕зр╕▓р╕Фр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ъ drawing method!
        fn color(&self) -> &str;        // р╕кр╕╡р╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╣Бр╕Ър╕Ъ color palette!

        fn draw_with_color(&self) -> String {
            // р╕зр╕▓р╕Фр╕Юр╕гр╣Йр╕нр╕бр╕кр╕╡р╣Бр╕Ър╕Ър╕ир╕┤р╕ер╕Ыр╕┤р╕Щ - р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Ир╕┤р╕Хр╕гр╕Бр╕гр╕Чр╕╡р╣Ир╣Гр╕кр╣Ир╕кр╕╡р╣Гр╕лр╣Йр╕ар╕▓р╕Юр╣Бр╕Ър╕Ъ colorful artist!
            format!("{} (р╕кр╕╡{} р╣Бр╕Ър╕Ъ artistic color!)", self.draw(), self.color())
        }
    }

    struct Square {
        size: f64,     // р╕Вр╕Щр╕▓р╕Фр╕Чр╕╡р╣Ир╣Ар╕Чр╣Ир╕▓р╕Чр╕╕р╕Бр╕Фр╣Йр╕▓р╕Щр╣Бр╕Ър╕Ъ equal-sided size!
        color: String, // р╕кр╕╡р╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Бр╕бр╕▓р╣Бр╕Ър╕Ъ chosen color!
    }

    impl Drawable for Square {
        fn draw(&self) -> String {
            // р╕зр╕▓р╕Фр╕кр╕╡р╣Ир╣Ар╕лр╕ер╕╡р╣Ир╕вр╕бр╣Бр╕Ър╕Ър╕кр╕бр╕бр╕▓р╕Хр╕г - р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕кр╕Цр╕▓р╕Ыр╕Щр╕┤р╕Бр╕Чр╕╡р╣Ир╕зр╕▓р╕Фр╣Бр╕Ър╕Ър╕Ър╣Йр╕▓р╕Щр╣Бр╕Ър╕Ъ architect's blueprint!
            format!("р╕кр╕╡р╣Ир╣Ар╕лр╕ер╕╡р╣Ир╕вр╕бр╕Ир╕▒р╕Хр╕╕р╕гр╕▒р╕к {}x{} (р╕гр╕╣р╕Ыр╕Чр╕гр╕Зр╕Чр╕╡р╣Ир╕кр╕бр╕Ър╕╣р╕гр╕Ур╣Мр╣Бр╕Ър╕Ър╣Бр╕Ър╕Ъ perfect square!)", self.size, self.size)
        }

        fn color(&self) -> &str {
            // р╕кр╣Ир╕Зр╕Др╕╖р╕Щр╕кр╕╡р╣Бр╕Ър╕Ър╕ар╕▓р╕Др╕ар╕╣р╕бр╕┤р╣Гр╕И - р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕ир╕┤р╕ер╕Ыр╕┤р╕Щр╕Чр╕╡р╣Ир╣Вр╕Кр╕зр╣Мр╕кр╕╡р╣Вр╕Ыр╕гр╕Фр╣Бр╕Ър╕Ъ favorite color reveal!
            &self.color
        }
    }

    struct Line {
        length: f64,   // р╕Др╕зр╕▓р╕бр╕вр╕▓р╕зр╕Чр╕╡р╣Ир╕зр╕▒р╕Фр╣Др╕Фр╣Йр╣Бр╕Ър╕Ъ measurable length!
        color: String, // р╕кр╕╡р╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Бр╕бр╕▓р╣Бр╕Ър╕Ъ selected color!
    }

    impl Drawable for Line {
        fn draw(&self) -> String {
            // р╕зр╕▓р╕Фр╣Ар╕кр╣Йр╕Щр╕Хр╕гр╕Зр╣Бр╕Ър╕Ър╣Ар╕гр╕╡р╕вр╕Ър╕Зр╣Ир╕▓р╕в - р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Щр╕▒р╕Бр╣Ар╕Вр╕╡р╕вр╕Щр╕Чр╕╡р╣Ир╕Вр╕╡р╕Фр╣Ар╕кр╣Йр╕Щр╣Гр╕Хр╣Йр╣Бр╕Ър╕Ъ underline master!
            format!("р╣Ар╕кр╣Йр╕Щр╕Хр╕гр╕Зр╕вр╕▓р╕з {:.1} (р╣Ар╕кр╣Йр╕Щр╕Чр╕╡р╣Ир╕Хр╕гр╕Зр╣Бр╕Ър╕Ъ perfectly straight line!)", self.length)
        }

        fn color(&self) -> &str {
            // р╕кр╣Ир╕Зр╕Др╕╖р╕Щр╕кр╕╡р╣Бр╕Ър╕Ър╕бр╕▒р╣Ир╕Щр╣Гр╕И - р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Фр╕╡р╣Др╕Лр╣Ар╕Щр╕нр╕гр╣Мр╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Бр╕кр╕╡р╣Бр╕Ър╕Ъ confident color choice!
            &self.color
        }
    }

    println!("\nЁЯОи === р╕гр╕░р╕Ър╕Ър╕зр╕▓р╕Фр╕гр╕╣р╕Ы: р╕кр╕Хр╕╣р╕Фр╕┤р╣Вр╕нр╕ир╕┤р╕ер╕Ыр╕░р╕Фр╕┤р╕Ир╕┤р╕Чр╕▒р╕ер╣Бр╕Ър╕Ъ digital art studio! === ЁЯОи");
    println!("ЁЯЦМя╕П р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕кр╕Хр╕╣р╕Фр╕┤р╣Вр╕нр╕ир╕┤р╕ер╕Ыр╕░р╕Чр╕╡р╣Ир╕бр╕╡р╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕бр╕╖р╕нр╕лр╕ер╕▓р╕Бр╕лр╕ер╕▓р╕вр╣Бр╕Ър╕Ъ diverse art tools studio! ЁЯОнЁЯМИ");

    let drawings: Vec<Box<dyn Drawable>> = vec![
        Box::new(Square {
            size: 5.0,                          // р╕Вр╕Щр╕▓р╕Фр╣Гр╕лр╕Нр╣Ир╣Бр╕Ър╕Ъ large size!
            color: String::from("р╣Бр╕Фр╕З"),          // р╕кр╕╡р╣Бр╕Фр╕Зр╣Бр╕Ър╕Ъ red color!
        }),
        Box::new(Line {
            length: 10.0,                       // р╕Др╕зр╕▓р╕бр╕вр╕▓р╕зр╕бр╕▓р╕Бр╣Бр╕Ър╕Ъ long length!
            color: String::from("р╕Щр╣Йр╕│р╣Ар╕Зр╕┤р╕Щ"),      // р╕кр╕╡р╕Щр╣Йр╕│р╣Ар╕Зр╕┤р╕Щр╣Бр╕Ър╕Ъ blue color!
        }),
        Box::new(Square {
            size: 3.0,                          // р╕Вр╕Щр╕▓р╕Фр╣Ар╕ер╣Зр╕Бр╣Бр╕Ър╕Ъ small size!
            color: String::from("р╣Ар╕Вр╕╡р╕вр╕з"),        // р╕кр╕╡р╣Ар╕Вр╕╡р╕вр╕зр╣Бр╕Ър╕Ъ green color!
        }),
    ];

    for (i, drawing) in drawings.iter().enumerate() {
        // р╣Бр╕кр╕Фр╕Зр╕Ьр╕ер╕Зр╕▓р╕Щр╕ир╕┤р╕ер╕Ыр╕░р╣Бр╕Ър╕Ъ art exhibition!
        println!("{}. {} (р╕Ьр╕ер╕Зр╕▓р╕Щр╕Чр╕╡р╣Ир╕кр╕зр╕вр╕Зр╕▓р╕бр╣Бр╕Ър╕Ъ beautiful artwork!)", i + 1, drawing.draw_with_color());
    }

    // 3. Serializable trait - р╕гр╕░р╕Ър╕Ър╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕Ър╕Ъ data transformation system!
    trait Serializable {
        fn serialize(&self) -> String;      // р╣Бр╕Ыр╕ер╕Зр╣Ар╕Ыр╣Зр╕Щр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╣Бр╕Ър╕Ъ text conversion!
        fn deserialize(data: &str) -> Result<Self, String>  // р╣Бр╕Ыр╕ер╕Зр╕Бр╕ер╕▒р╕Ър╣Бр╕Ър╕Ъ reverse conversion!
        where
            Self: Sized;
    }

    #[derive(Debug, Clone)]
    struct User {
        id: u32,           // р╕гр╕лр╕▒р╕кр╕Ыр╕гр╕░р╕Ир╕│р╕Хр╕▒р╕зр╣Бр╕Ър╕Ъ unique ID!
        username: String,  // р╕Кр╕╖р╣Ир╕нр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╣Бр╕Ър╕Ъ user identity!
        email: String,     // р╕нр╕╡р╣Ар╕бр╕ер╣Бр╕Ър╕Ъ contact info!
    }

    impl Serializable for User {
        fn serialize(&self) -> String {
            // р╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Ыр╣Зр╕Щр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╣Бр╕Ър╕Ъ data packing - р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Бр╕▓р╕гр╕лр╣Ир╕нр╕Вр╕нр╕Зр╕Вр╕зр╕▒р╕Нр╣Бр╕Ър╕Ъ gift wrapping!
            format!("{}|{}|{}", self.id, self.username, self.email)
        }

        fn deserialize(data: &str) -> Result<Self, String> {
            // р╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Бр╕ер╕▒р╕Ър╣Ар╕Ыр╣Зр╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕Ър╕Ъ data unpacking - р╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Бр╕▓р╕гр╣Бр╕Бр╕░р╕Вр╕нр╕Зр╕Вр╕зр╕▒р╕Нр╣Бр╕Ър╕Ъ gift unwrapping!
            let parts: Vec<&str> = data.split('|').collect();
            if parts.len() != 3 {
                return Err(String::from("Invalid format (р╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╣Др╕бр╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕Зр╣Бр╕Ър╕Ъ wrong format!)"));
            }

            let id = parts[0]
                .parse::<u32>()
                .map_err(|_| String::from("Invalid ID (р╕гр╕лр╕▒р╕кр╣Др╕бр╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕Зр╣Бр╕Ър╕Ъ invalid ID!)"))?;

            Ok(Self {
                id,                                    // р╕гр╕лр╕▒р╕кр╕Чр╕╡р╣Ир╣Бр╕Ыр╕ер╕Зр╣Бр╕ер╣Йр╕зр╣Бр╕Ър╕Ъ converted ID!
                username: parts[1].to_string(),        // р╕Кр╕╖р╣Ир╕нр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Чр╕╡р╣Ир╕Бр╕╣р╣Йр╕Др╕╖р╕Щр╣Бр╕Ър╕Ъ restored username!
                email: parts[2].to_string(),           // р╕нр╕╡р╣Ар╕бр╕ер╕Чр╕╡р╣Ир╕Бр╕╣р╣Йр╕Др╕╖р╕Щр╣Бр╕Ър╕Ъ restored email!
            })
        }
    }

    println!("\nЁЯТ╛ === р╕гр╕░р╕Ър╕Ъ Serialization: р╣Вр╕гр╕Зр╕Зр╕▓р╕Щр╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕Ър╕Ъ data transformation factory! === ЁЯТ╛");
    println!("ЁЯУж р╣Ар╕лр╕бр╕╖р╕нр╕Щр╣Вр╕гр╕Зр╕Зр╕▓р╕Щр╕Чр╕╡р╣Ир╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Др╕Ыр╕бр╕▓р╣Др╕Фр╣Йр╣Бр╕Ър╕Ъ bidirectional data converter! ЁЯФДтЬи");

    let user = User {
        id: 1,                                        // р╕гр╕лр╕▒р╕кр╕лр╕Щр╕╢р╣Ир╕Зр╣Бр╕Ър╕Ъ number one!
        username: String::from("john_doe"),           // р╕Кр╕╖р╣Ир╕нр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╣Бр╕Ър╕Ър╕Др╕ер╕▓р╕кр╕кр╕┤р╕Бр╣Бр╕Ър╕Ъ classic username!
        email: String::from("john@example.com"),      // р╕нр╕╡р╣Ар╕бр╕ер╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╣Бр╕Ър╕Ъ sample email!
    };

    let serialized = user.serialize();               // р╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕Ър╕Ъ data conversion!
    println!("ЁЯУд Serialized: {serialized} (р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╕лр╣Ир╕нр╣Бр╕ер╣Йр╕зр╣Бр╕Ър╕Ъ packaged data!)");

    match User::deserialize(&serialized) {
        Ok(deserialized_user) => {
            println!("ЁЯУе Deserialized: {deserialized_user:?} (р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╣Бр╕Бр╕░р╣Бр╕ер╣Йр╕зр╣Бр╕Ър╕Ъ unpacked data!)");
        }
        Err(error) => {
            println!("тЭМ Error: {error} (р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Бр╕Ър╕Ъ unexpected error!)");
        }
    }

    // р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▒р╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕┤р╕Ф - р╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╕Др╕зр╕▓р╕бр╣Бр╕Вр╣Зр╕Зр╣Бр╕Бр╕гр╣Ир╕Зр╣Бр╕Ър╕Ъ stress testing!
    match User::deserialize("invalid|data") {
        Ok(user) => println!("ЁЯУе Unexpected success: {user:?} (р╕кр╕│р╣Ар╕гр╣Зр╕Ир╣Бр╕Ър╕Ър╣Др╕бр╣Ир╕Др╕▓р╕Фр╕Др╕┤р╕Фр╣Бр╕Ър╕Ъ surprising success!)"),
        Err(error) => println!("тЭМ Expected error: {error} (р╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╕Чр╕╡р╣Ир╕Др╕▓р╕Фр╕лр╕зр╕▒р╕Зр╣Бр╕Ър╕Ъ expected failure!)"),
    }

    println!("\nЁЯОЙ р╕Ир╕Ър╣Бр╕Ър╕Ър╕Эр╕╢р╕Бр╕лр╕▒р╕Ф Traits! р╕Хр╕нр╕Щр╕Щр╕╡р╣Йр╕Др╕╕р╕Ур╣Ар╕Ыр╣Зр╕Щр╕Щр╕▒р╕Бр╕Бр╕╡р╕мр╕▓ Traits р╕Чр╕╡р╣Ир╣Бр╕Вр╣Зр╕Зр╣Бр╕Бр╕гр╣Ир╕Зр╣Бр╕ер╣Йр╕з! ЁЯОЙ");
    println!("ЁЯПЖ р╕вр╕┤р╕Щр╕Фр╕╡р╕Фр╣Йр╕зр╕в! р╕Др╕╕р╕Ур╕Ьр╣Ир╕▓р╕Щр╕Бр╕▓р╕гр╕Эр╕╢р╕Бр╕Лр╣Йр╕нр╕бр╣Бр╕Ър╕Ър╕Др╕гр╕Ър╕Цр╣Йр╕зр╕Щр╣Бр╕ер╕░р╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Й Traits р╣Гр╕Щр╣Вр╕ер╕Бр╕Ир╕гр╕┤р╕Зр╣Бр╕ер╣Йр╕з! ЁЯТкЁЯМЯ");
}
