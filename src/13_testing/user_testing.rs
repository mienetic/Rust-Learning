//! User Testing Examples - ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏™‡∏∑‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ! üïµÔ∏è‚Äç‚ôÇÔ∏èüë§
//!
//! ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö struct ‡∏ó‡∏µ‡πà‡∏°‡∏µ validation ‡πÅ‡∏•‡∏∞ error handling
//! ‡∏™‡∏∑‡∏ö‡∏™‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î! üîçüìã

/// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á struct ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ - ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏Å‡∏™‡∏∑‡∏ö! üÜîüïµÔ∏è‚Äç‚ôÇÔ∏è
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct User {
    pub id: u32,        // üÜî ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏Å‡∏™‡∏∑‡∏ö
    pub name: String,    // üìõ ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡∏™‡∏∑‡∏ö
    pub email: String,   // üìß ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
    pub age: u32,        // üìÖ ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏™‡∏∑‡∏ö
}

impl User {
    /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏Å‡∏™‡∏∑‡∏ö‡πÉ‡∏´‡∏°‡πà - ‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß! üÜî‚ú®
    /// 
    /// # Errors
    /// 
    /// ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô error ‡∏´‡∏≤‡∏Å:
    /// - ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ (‡∏ô‡∏±‡∏Å‡∏™‡∏∑‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠!)
    /// - ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÑ‡∏°‡πà‡∏°‡∏µ '@')
    /// - ‡∏≠‡∏≤‡∏¢‡∏∏‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 150 ‡∏õ‡∏µ (‡∏ô‡∏±‡∏Å‡∏™‡∏∑‡∏ö‡πÅ‡∏Å‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ!)
    pub fn new(id: u32, name: String, email: String, age: u32) -> Result<Self, String> {
        if name.is_empty() {
            return Err("Name cannot be empty".to_string());  // ‚ùå ‡∏ô‡∏±‡∏Å‡∏™‡∏∑‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠
        }

        if !email.contains('@') {
            return Err("Invalid email format".to_string());  // ‚ùå ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        }

        if age > 150 {
            return Err("Age is too high".to_string());  // ‚ùå ‡∏≠‡∏≤‡∏¢‡∏∏‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
        }

        Ok(Self {
            id,     // ‚úÖ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß
            name,   // ‚úÖ ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡∏™‡∏∑‡∏ö
            email,  // ‚úÖ ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
            age,    // ‚úÖ ‡∏≠‡∏≤‡∏¢‡∏∏
        })
    }

    /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡∏™‡∏∑‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏´‡∏ç‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏! üîûüïµÔ∏è‚Äç‚ôÇÔ∏è
    #[must_use]
    pub const fn is_adult(&self) -> bool {
        self.age >= 18  // üîû ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏ 18 ‡∏õ‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ
    }

    /// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏±‡∏Å‡∏™‡∏∑‡∏ö - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠! üìß‚úèÔ∏è
    /// 
    /// # Errors
    /// 
    /// ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô error ‡∏´‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÑ‡∏°‡πà‡∏°‡∏µ '@')
    pub fn update_email(&mut self, new_email: String) -> Result<(), String> {
        if !new_email.contains('@') {
            return Err("Invalid email format".to_string());  // ‚ùå ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        }
        self.email = new_email;  // ‚úèÔ∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
        Ok(())  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    }

    /// ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏™‡∏∑‡∏ö - ‡∏õ‡πâ‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠! üìõüÜî
    #[must_use]
    pub fn get_display_name(&self) -> String {
        format!("{} ({})", self.name, self.email)  // üìõ ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡πÄ‡∏°‡∏•
    }

    /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏≠‡∏≤‡∏¢‡∏∏! üìÖüîç
    #[must_use]
    pub const fn is_valid_age_range(&self, min_age: u32, max_age: u32) -> bool {
        self.age >= min_age && self.age <= max_age  // üìÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏
    }
}

/// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô User testing - ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ô‡∏±‡∏Å‡∏™‡∏∑‡∏ö! üïµÔ∏è‚Äç‚ôÇÔ∏èüß™
pub fn user_testing_examples() {
    println!("üïµÔ∏è‚Äç‚ôÇÔ∏è === User Detective Lab Testing === üß™üë§");

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á User ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    match User::new(
        1,
        "‡∏™‡∏°‡∏ä‡∏≤‡∏¢".to_string(),
        "somchai@example.com".to_string(),
        25,
    ) {
        Ok(user) => {
            println!("‚úÖ User ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {user:?}");
            println!("üîû ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡∏ç‡πà: {}", user.is_adult());
            println!("üìõ ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á: {}", user.get_display_name());
            println!("üìä ‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 20-30: {}", user.is_valid_age_range(20, 30));
        }
        Err(e) => println!("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á User: {e}"),
    }

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á User ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤‡∏á
    match User::new(2, String::new(), "test@example.com".to_string(), 25) {
        Ok(user) => println!("‚úÖ User ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {user:?}"),
        Err(e) => println!("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á User (‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤‡∏á): {e}"),
    }

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á User ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    match User::new(3, "‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á".to_string(), "invalid-email".to_string(), 30) {
        Ok(user) => println!("‚úÖ User ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {user:?}"),
        Err(e) => println!("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á User (‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á): {e}"),
    }

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á User ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - ‡∏≠‡∏≤‡∏¢‡∏∏‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    match User::new(4, "‡∏Ñ‡∏ô‡πÅ‡∏Å‡πà".to_string(), "old@example.com".to_string(), 200) {
        Ok(user) => println!("‚úÖ User ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {user:?}"),
        Err(e) => println!("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á User (‡∏≠‡∏≤‡∏¢‡∏∏‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ): {e}"),
    }

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏µ‡πÄ‡∏°‡∏•
    if let Ok(mut user) = User::new(5, "‡∏ó‡∏î‡∏™‡∏≠‡∏ö".to_string(), "test@example.com".to_string(), 25)
    {
        println!("üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏î‡∏¥‡∏°: {}", user.email);

        match user.update_email("newemail@example.com".to_string()) {
            Ok(()) => println!("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {}", user.email),
            Err(e) => println!("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏µ‡πÄ‡∏°‡∏•: {e}"),
        }

        match user.update_email("invalid-email".to_string()) {
            Ok(()) => println!("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {}", user.email),
            Err(e) => println!("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á): {e}"),
        }
    }
}

#[cfg(test)]
pub mod tests {
    use super::*;

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö User
    #[test]
    #[allow(clippy::missing_panics_doc)]
    pub fn test_user_creation_success() {
        let user = User::new(1, "John".to_string(), "john@example.com".to_string(), 25);
        assert!(user.is_ok());

        let user = user.unwrap();
        assert_eq!(user.id, 1);
        assert_eq!(user.name, "John");
        assert_eq!(user.email, "john@example.com");
        assert_eq!(user.age, 25);
    }

    #[test]
    #[allow(clippy::missing_panics_doc)]
    pub fn test_user_creation_empty_name() {
        let user = User::new(1, String::new(), "test@example.com".to_string(), 25);
        assert!(user.is_err());
        assert_eq!(user.unwrap_err(), "Name cannot be empty");
    }

    #[test]
    #[allow(clippy::missing_panics_doc)]
    pub fn test_user_creation_invalid_email() {
        let user = User::new(1, "John".to_string(), "invalid-email".to_string(), 25);
        assert!(user.is_err());
        assert_eq!(user.unwrap_err(), "Invalid email format");
    }

    #[test]
    #[allow(clippy::missing_panics_doc)]
    pub fn test_user_creation_invalid_age() {
        let user = User::new(1, "John".to_string(), "john@example.com".to_string(), 200);
        assert!(user.is_err());
        assert_eq!(user.unwrap_err(), "Age is too high");
    }

    #[test]
    #[allow(clippy::missing_panics_doc)]
    pub fn test_user_is_adult() {
        let adult = User::new(1, "Adult".to_string(), "adult@example.com".to_string(), 25).unwrap();
        let minor = User::new(2, "Minor".to_string(), "minor@example.com".to_string(), 16).unwrap();
        let exactly_18 = User::new(
            3,
            "Eighteen".to_string(),
            "eighteen@example.com".to_string(),
            18,
        )
        .unwrap();

        assert!(adult.is_adult());
        assert!(!minor.is_adult());
        assert!(exactly_18.is_adult());
    }

    #[test]
    #[allow(clippy::missing_panics_doc)]
    pub fn test_user_update_email() {
        let mut user =
            User::new(1, "John".to_string(), "john@example.com".to_string(), 25).unwrap();

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        assert!(
            user.update_email("newemail@example.com".to_string())
                .is_ok()
        );
        assert_eq!(user.email, "newemail@example.com");

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        assert!(user.update_email("invalid-email".to_string()).is_err());
        assert_eq!(user.email, "newemail@example.com"); // ‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    }

    #[test]
    #[allow(clippy::missing_panics_doc)]
    pub fn test_user_get_display_name() {
        let user = User::new(
            1,
            "John Doe".to_string(),
            "john@example.com".to_string(),
            25,
        )
        .unwrap();
        assert_eq!(user.get_display_name(), "John Doe (john@example.com)");
    }

    #[test]
    #[allow(clippy::missing_panics_doc)]
    pub fn test_user_is_valid_age_range() {
        let user = User::new(1, "John".to_string(), "john@example.com".to_string(), 25).unwrap();

        assert!(user.is_valid_age_range(20, 30));
        assert!(user.is_valid_age_range(25, 25));
        assert!(!user.is_valid_age_range(30, 40));
        assert!(!user.is_valid_age_range(10, 20));
    }

    #[test]
    #[allow(clippy::missing_panics_doc)]
    pub fn test_user_edge_cases() {
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏ 0
        let baby = User::new(1, "Baby".to_string(), "baby@example.com".to_string(), 0);
        assert!(baby.is_ok());
        assert!(!baby.unwrap().is_adult());

        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏ 150 (‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î)
        let old = User::new(2, "Old".to_string(), "old@example.com".to_string(), 150);
        assert!(old.is_ok());
        assert!(old.unwrap().is_adult());

        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ @ ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß
        let multi_at = User::new(
            3,
            "Multi".to_string(),
            "test@sub@example.com".to_string(),
            25,
        );
        assert!(multi_at.is_ok());
    }

    #[test]
    #[allow(clippy::missing_panics_doc)]
    pub fn test_user_testing_functions() {
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà panic
        user_testing_examples();
    }
}