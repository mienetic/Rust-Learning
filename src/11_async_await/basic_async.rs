//! Basic Async/Await Examples - ‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ã‡∏¥‡∏á‡∏Ñ‡πå! üé≠‚ö°
//!
//! ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢:
//! - ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ async/await ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô!)
//! - ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö sequential vs concurrent execution (‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡∏•‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏á vs ‡∏ó‡∏≥‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô!)
//! - ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ `tokio::join`! macro (‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏£‡∏ß‡∏°‡∏û‡∏•‡∏±‡∏á!)

use std::time::Duration;
use tokio::time::sleep;

/// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ async/await ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô - ‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏Ñ‡∏≠‡∏¢! üéì‚è∞
/// ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏®‡∏¥‡∏•‡∏õ‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ã‡∏¥‡∏á‡∏Ñ‡πå ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏ö‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô! üé≠
#[allow(clippy::items_after_statements)]
pub async fn basic_async_example() {
    println!("\nüöÄ === ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Async/Await ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô: ‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏Ñ‡∏≠‡∏¢! === üöÄ");

    async fn slow_operation(name: &str, duration: u64) -> String {
        println!("‚è≥ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô: {name} (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏ä‡∏ü‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£!)");
        sleep(Duration::from_millis(duration)).await;  // ‡∏£‡∏≠‡πÅ‡∏ö‡∏ö‡∏≠‡∏î‡∏ó‡∏ô (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏£‡∏≠‡∏Ç‡πâ‡∏≤‡∏ß‡∏™‡∏∏‡∏Å!)
        println!("‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏á‡∏≤‡∏ô: {name} (‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡πÅ‡∏•‡πâ‡∏ß!)");
        format!("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å {name} (‡∏à‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ!)")
    }

    // ‡∏£‡∏±‡∏ô‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö sequential - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏≥‡∏ó‡∏µ‡∏•‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏á! üë§‚è≥
    println!("üìã ‡∏£‡∏±‡∏ô‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö Sequential (‡∏ó‡∏≥‡∏ó‡∏µ‡∏•‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏ô‡∏Ç‡∏¢‡∏±‡∏ô!):");
    let start = std::time::Instant::now();  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô!)

    let result1 = slow_operation("‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà 1 (‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏Å‡πÅ‡∏ö‡∏ö heavy task!)", 1000).await;
    let result2 = slow_operation("‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà 2 (‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ö‡∏ö medium task!)", 800).await;
    let result3 = slow_operation("‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà 3 (‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏≤‡πÅ‡∏ö‡∏ö light task!)", 600).await;

    println!("‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ (Sequential): {:?} (‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞‡∏°‡∏≤‡∏Å!)", start.elapsed());
    println!("üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: {result1}, {result2}, {result3} (‡∏ó‡∏≥‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ó‡∏µ‡∏•‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏á!)");
}

/// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ join! ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô tasks ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô - ‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏ã‡∏∏‡∏õ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡∏Æ‡∏µ‡πÇ‡∏£‡πà! ü¶∏‚Äç‚ôÇÔ∏è‚ö°
/// ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö concurrent ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡∏° Avengers ‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô! ü¶∏‚Äç‚ôÄÔ∏èü¶∏‚Äç‚ôÇÔ∏è
#[allow(clippy::items_after_statements)]
pub async fn concurrent_tasks_example() {
    println!("\n‚ö° === ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Concurrent Tasks: ‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏ã‡∏∏‡∏õ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡∏Æ‡∏µ‡πÇ‡∏£‡πà! === ‚ö°");

    async fn async_task(id: u32, duration: u64) -> u32 {
        println!("üèÉ Task {id} ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (‡∏ã‡∏∏‡∏õ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡∏Æ‡∏µ‡πÇ‡∏£‡πà‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà {id} ‡∏≠‡∏≠‡∏Å‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£!)");
        sleep(Duration::from_millis(duration)).await;  // ‡πÉ‡∏ä‡πâ‡∏û‡∏•‡∏±‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏© (‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏≤‡∏£‡πå‡∏à!)
        println!("‚úÖ Task {id} ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß (‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!)");
        id * 10  // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏•‡∏±‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Å‡∏°!)
    }

    // ‡∏£‡∏±‡∏ô‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö concurrent ‡∏î‡πâ‡∏ß‡∏¢ join! - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡∏°‡∏ã‡∏∏‡∏õ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡∏Æ‡∏µ‡πÇ‡∏£‡πà‡∏≠‡∏≠‡∏Å‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô! ü¶∏‚Äç‚ôÇÔ∏èü¶∏‚Äç‚ôÄÔ∏èü¶∏‚Äç‚ôÇÔ∏è
    println!("üìã ‡∏£‡∏±‡∏ô‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö Concurrent (join! - ‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏£‡∏ß‡∏°‡∏û‡∏•‡∏±‡∏á!):");
    let start = std::time::Instant::now();  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á!)

    let (result1, result2, result3) =
        tokio::join!(async_task(1, 1000), async_task(2, 800), async_task(3, 600));  // ‡∏£‡∏ß‡∏°‡∏û‡∏•‡∏±‡∏á‡∏ó‡∏±‡πâ‡∏á 3 ‡∏Ñ‡∏ô!

    println!("‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ (Concurrent): {:?} (‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏¢‡∏≠‡∏∞!)", start.elapsed());
    println!("üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: {result1}, {result2}, {result3} (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°!)");
}

/// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ spawn ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö background tasks - ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á! üè≠üëª
/// ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á background tasks ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏°‡∏µ‡∏ú‡∏µ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á! üëªüíº
pub async fn spawn_tasks_example() {
    println!("\nüéØ === ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Spawn Tasks: ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á! === üéØ");

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á background tasks - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏à‡πâ‡∏≤‡∏á‡∏ú‡∏µ‡∏°‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏≥‡∏á‡∏≤‡∏ô! üëªüíº
    let task1 = tokio::spawn(async {
        sleep(Duration::from_millis(500)).await;  // ‡∏ú‡∏µ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ú‡∏µ‡∏Ç‡∏¢‡∏±‡∏ô!)
        "Task 1 ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß (‡∏ú‡∏µ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ï‡∏±‡∏ß!)"
    });

    let task2 = tokio::spawn(async {
        sleep(Duration::from_millis(300)).await;  // ‡∏ú‡∏µ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 2 ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πá‡∏ß (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ú‡∏µ‡πÄ‡∏£‡πà‡∏á‡∏£‡∏µ‡∏ö!)
        "Task 2 ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß (‡∏ú‡∏µ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 2 ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ï‡∏±‡∏ß!)"
    });

    let task3 = tokio::spawn(async {
        sleep(Duration::from_millis(700)).await;  // ‡∏ú‡∏µ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 3 ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ä‡πâ‡∏≤ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ú‡∏µ‡∏Ç‡∏µ‡πâ‡πÄ‡∏Å‡∏µ‡∏¢‡∏à!)
        "Task 3 ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß (‡∏ú‡∏µ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 3 ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ï‡∏±‡∏ß!)"
    });

    // ‡∏£‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å tasks - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏£‡∏≠‡∏ú‡∏µ‡∏°‡∏≤‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ï‡∏±‡∏ß! üëªüìã
    match tokio::try_join!(task1, task2, task3) {
        Ok((result1, result2, result3)) => {
            println!("‚úÖ ‡∏ó‡∏∏‡∏Å tasks ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß (‡∏ú‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡∏Ñ‡∏£‡∏ö!):");
            println!("   - {result1}");
            println!("   - {result2}");
            println!("   - {result3}");
        }
        Err(e) => println!("‚ùå ‡∏°‡∏µ task ‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e} (‡∏ú‡∏µ‡∏Ñ‡∏ô‡πÑ‡∏´‡∏ô‡∏´‡∏≤‡∏¢‡πÑ‡∏õ!)"),
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use tokio::test;

    #[test]
    async fn test_concurrent_execution() {
        let start = std::time::Instant::now();  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô! üèÅ

        let (result1, result2) = tokio::join!(
            async {
                sleep(Duration::from_millis(100)).await;  // ‡∏ô‡∏±‡∏Å‡πÅ‡∏Ç‡πà‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 1! üèÉ‚Äç‚ôÇÔ∏è
                "test1"  // ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡∏Å‡πÅ‡∏Ç‡πà‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 1! üèÜ
            },
            async {
                sleep(Duration::from_millis(100)).await;  // ‡∏ô‡∏±‡∏Å‡πÅ‡∏Ç‡πà‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 2! üèÉ‚Äç‚ôÄÔ∏è
                "test2"  // ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡∏Å‡πÅ‡∏Ç‡πà‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 2! üèÜ
            }
        );

        let elapsed = start.elapsed();  // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô! ‚è±Ô∏è

        assert_eq!(result1, "test1");  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ô‡∏±‡∏Å‡πÅ‡∏Ç‡πà‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 1! ‚úÖ
        assert_eq!(result2, "test2");  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ô‡∏±‡∏Å‡πÅ‡∏Ç‡πà‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 2! ‚úÖ
        // Concurrent execution ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 200ms (‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πà‡∏á‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô!)
        assert!(elapsed < Duration::from_millis(200));
    }

    #[test]
    async fn test_spawn_tasks() {
        let task = tokio::spawn(async {
            sleep(Duration::from_millis(50)).await;  // ‡∏ú‡∏µ‡∏ä‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô 50ms! üëª
            42  // ‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏•! üçÄ
        });

        let result = task.await.unwrap();  // ‡∏£‡∏≠‡∏ú‡∏µ‡∏°‡∏≤‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•! üëªüìã
        assert_eq!(result, 42);  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏•! ‚ú®
    }
}