//! Structs - р╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ Structs р╣Гр╕Щ Rust
//!
//! р╣Др╕Яр╕ер╣Мр╕Щр╕╡р╣Йр╕кр╕нр╕Щр╣Ар╕гр╕╖р╣Ир╕нр╕Зр╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕Зр╣Бр╕ер╕░р╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ Structs р╣Гр╕Щр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Хр╣Ир╕▓р╕Зр╣Ж
//! р╕гр╕зр╕бр╕Цр╕╢р╕З Named Structs, Tuple Structs, Unit Structs р╣Бр╕ер╕░ Methods
//! (р╣Вр╕гр╕Зр╕Зр╕▓р╕Щр╕Ьр╕ер╕┤р╕Хр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕лр╣Ир╕Зр╕нр╕Щр╕▓р╕Др╕Х! ЁЯПн)

/// р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕кр╕│р╕лр╕гр╕▒р╕Ър╕кр╕нр╕Щр╣Ар╕гр╕╖р╣Ир╕нр╕З Structs
/// р╕бр╕▓р╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Йр╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕Зр╣Бр╕ер╕░р╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ Structs р╕Бр╕▒р╕Щр╣Ар╕Цр╕нр╕░! (р╕кр╕Цр╕▓р╕Ыр╕Щр╕┤р╕Бр╣Бр╕лр╣Ир╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е! ЁЯС╖тАНтЩВя╕П)
pub fn learn_structs() {
    println!("ЁЯПЧя╕П === Structs р╣Гр╕Щ Rust: р╣Вр╕гр╕Зр╕Зр╕▓р╕Щр╕Ьр╕ер╕┤р╕Хр╕Вр╣Йр╕нр╕бр╕╣р╕е! === ЁЯПЧя╕П");

    // Named Structs (р╕Ър╕▒р╕Хр╕гр╕Ыр╕гр╕░р╕Кр╕▓р╕Кр╕Щр╕Фр╕┤р╕Ир╕┤р╕Чр╕▒р╕е! ЁЯЖФ)
    #[derive(Debug)]
    #[allow(dead_code)]
    struct User {
        username: String,    // р╕Кр╕╖р╣Ир╕нр╣Ар╕ер╣Ир╕Щр╣Гр╕Щр╣Вр╕ер╕Бр╕Фр╕┤р╕Ир╕┤р╕Чр╕▒р╕е! ЁЯОо
        email: String,       // р╕Чр╕╡р╣Ир╕нр╕вр╕╣р╣Ир╣Гр╕Щр╣Др╕Лр╣Ар╕Ър╕нр╕гр╣Мр╕кр╣Ар╕Ыр╕Л! ЁЯУо
        sign_in_count: u64,  // р╕Ир╕│р╕Щр╕зр╕Щр╕Др╕гр╕▒р╣Йр╕Зр╕Чр╕╡р╣Ир╕бр╕▓р╣Ар╕вр╕╖р╕нр╕Щ! ЁЯУК
        active: bool,        // р╕кр╕Цр╕▓р╕Щр╕░р╕нр╕нр╕Щр╣Др╕ер╕Щр╣М! ЁЯЯв
    }

    println!("ЁЯСд === Named Structs: р╕кр╕│р╕Щр╕▒р╕Бр╕Зр╕▓р╕Щр╕Чр╕░р╣Ар╕Ър╕╡р╕вр╕Щр╕гр╕▓р╕йр╕Ор╕гр╣Мр╕Фр╕┤р╕Ир╕┤р╕Чр╕▒р╕е! === ЁЯСд");
    let user1 = User {
        email: String::from("someone@example.com"),
        username: String::from("someusername123"),
        active: true,
        sign_in_count: 1,
    };

    println!("тЬЕ р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й: {user1:?} (р╕ер╕Зр╕Чр╕░р╣Ар╕Ър╕╡р╕вр╕Щр╕кр╕│р╣Ар╕гр╣Зр╕И! ЁЯОЙ)");
    println!("ЁЯУз р╕нр╕╡р╣Ар╕бр╕е: {} (р╕Чр╕╡р╣Ир╕нр╕вр╕╣р╣Ир╣Гр╕Щр╣Вр╕ер╕Бр╕Фр╕┤р╕Ир╕┤р╕Чр╕▒р╕е! ЁЯМР)", user1.email);
    println!("ЁЯСд р╕Кр╕╖р╣Ир╕нр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й: {} (р╕Кр╕╖р╣Ир╕нр╣Ар╕ер╣Ир╕Щр╕кр╕╕р╕Фр╣Ар╕Чр╣И! ЁЯШО)", user1.username);

    // Mutable struct (р╕ир╕╣р╕Щр╕вр╣Мр╣Бр╕Бр╣Йр╣Др╕Вр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╣Ир╕зр╕Щр╕Хр╕▒р╕з! тЬПя╕П)
    let mut user2 = User {
        email: String::from("another@example.com"),
        username: String::from("anotherusername567"),
        active: true,
        sign_in_count: 1,
    };

    user2.email = String::from("anotheremail@example.com"); // р╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕Чр╕╡р╣Ир╕нр╕вр╕╣р╣Ир╣Гр╕лр╕бр╣И! ЁЯУм
    println!("тЬПя╕П р╕нр╕╡р╣Ар╕бр╕ер╣Гр╕лр╕бр╣И: {} (р╕вр╣Йр╕▓р╕Щр╕Ър╣Йр╕▓р╕Щр╣Бр╕ер╣Йр╕з! ЁЯПа)", user2.email);

    // Struct update syntax (р╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕Цр╣Ир╕▓р╕вр╣Ар╕нр╕Бр╕кр╕▓р╕гр╕нр╕▒р╕Ир╕Йр╕гр╕┤р╕вр╕░! ЁЯУД)
    let user3 = User {
        email: String::from("another@example.com"),
        username: String::from("anotherusername567"),
        ..user1 // р╣Гр╕Кр╣Йр╕Др╣Ир╕▓р╕Чр╕╡р╣Ир╣Ар╕лр╕ер╕╖р╕нр╕Ир╕▓р╕Б user1 (р╕Др╕▒р╕Фр╕ер╕нр╕Бр╕кр╣Ир╕зр╕Щр╕Чр╕╡р╣Ир╣Ар╕лр╕ер╕╖р╕н! ЁЯУЛ)
    };

    println!("ЁЯФД р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╣Гр╕лр╕бр╣Ир╕Ир╕▓р╕Б update syntax: {user3:?} (р╣Вр╕Др╕ер╕Щр╕кр╕│р╣Ар╕гр╣Зр╕И! ЁЯзм)");

    // Tuple Structs (р╕Бр╕ер╣Ир╕нр╕Зр╕ер╕╢р╕Бр╕ер╕▒р╕Ър╣Др╕гр╣Йр╕Ыр╣Йр╕▓р╕вр╕Кр╕╖р╣Ир╕н! ЁЯУж)
    #[derive(Debug)]
    #[allow(dead_code)]
    struct Color(i32, i32, i32);  // р╕Юр╕▓р╣Ар╕ер╕Чр╕кр╕╡р╕Щр╕▒р╕Бр╕ир╕┤р╕ер╕Ыр╕┤р╕Щ! ЁЯОи
    #[derive(Debug)]
    #[allow(dead_code)]
    struct Point(i32, i32, i32);  // р╕Юр╕┤р╕Бр╕▒р╕Фр╣Гр╕Щр╕нр╕зр╕Бр╕▓р╕и! ЁЯЪА

    println!("\nЁЯОи === Tuple Structs: р╕Бр╕ер╣Ир╕нр╕Зр╕ер╕╢р╕Бр╕ер╕▒р╕Ър╣Др╕гр╣Йр╕Ыр╣Йр╕▓р╕в! === ЁЯОи");
    let black = Color(0, 0, 0);   // р╕кр╕╡р╕Фр╕│р╕кр╕Щр╕┤р╕Ч! тЪл
    let origin = Point(0, 0, 0);  // р╕Ир╕╕р╕Фр╕ир╕╣р╕Щр╕вр╣Мр╕Бр╕ер╕▓р╕Зр╕Ир╕▒р╕Бр╕гр╕зр╕▓р╕е! ЁЯММ

    println!("тЪл р╕кр╕╡р╕Фр╕│: {black:?} (р╕бр╕╖р╕Фр╕бр╕┤р╕Фр╣Др╕гр╣Йр╣Бр╕кр╕З! ЁЯМС)");
    println!("ЁЯУН р╕Ир╕╕р╕Фр╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ: {origin:?} (р╕ир╕╣р╕Щр╕вр╣Мр╕Бр╕ер╕▓р╕Зр╕Ир╕▒р╕Бр╕гр╕зр╕▓р╕е! ЁЯОп)");
    println!("ЁЯФ┤ р╕Др╣Ир╕▓р╕кр╕╡р╣Бр╕Фр╕З: {} (р╕Кр╣Ир╕нр╕Зр╣Бр╕гр╕Бр╕Вр╕нр╕Зр╕кр╕╡! ЁЯОк)", black.0);

    // Unit Structs (р╕Бр╕ер╣Ир╕нр╕Зр╕зр╣Ир╕▓р╕Зр╣Ар╕Ыр╕ер╣Ир╕▓р╣Бр╕Хр╣Ир╕бр╕╡р╕Др╕зр╕▓р╕бр╕лр╕бр╕▓р╕в! ЁЯУн)
    #[derive(Debug)]
    struct AlwaysEqual;  // р╕кр╕▒р╕Нр╕ер╕▒р╕Бр╕йр╕Ур╣Мр╣Бр╕лр╣Ир╕Зр╕Др╕зр╕▓р╕бр╣Ар╕Чр╣Ир╕▓р╣Ар╕Чр╕╡р╕вр╕б! тЪЦя╕П

    println!("\nтЪк === Unit Structs: р╕Бр╕ер╣Ир╕нр╕Зр╕зр╣Ир╕▓р╕Зр╕Чр╕╡р╣Ир╣Др╕бр╣Ир╕зр╣Ир╕▓р╕З! === тЪк");
    let subject = AlwaysEqual;  // р╕Хр╕▒р╕зр╣Бр╕Чр╕Щр╣Бр╕лр╣Ир╕Зр╕Др╕зр╕▓р╕бр╣Ар╕Чр╣Ир╕▓р╣Ар╕Чр╕╡р╕вр╕б! ЁЯдЭ
    println!("тЬЕ Unit struct: {subject:?} (р╕зр╣Ир╕▓р╕Зр╣Бр╕Хр╣Ир╕бр╕╡р╕Др╣Ир╕▓! ЁЯТО)");

    // Methods (р╕лр╣Йр╕нр╕Зр╣Бр╕ер╣Зр╕Ър╕Вр╕нр╕Зр╕Щр╕▒р╕Бр╕Др╕Ур╕┤р╕Хр╕ир╕▓р╕кр╕Хр╕гр╣М! ЁЯзо)
    #[derive(Debug)]
    struct Rectangle {
        width: u32,   // р╕Др╕зр╕▓р╕бр╕Бр╕зр╣Йр╕▓р╕Зр╕Вр╕нр╕Зр╕нр╕▓р╕Ур╕▓р╕Ир╕▒р╕Бр╕г! ЁЯУП
        height: u32,  // р╕Др╕зр╕▓р╕бр╕кр╕╣р╕Зр╕Вр╕нр╕Зр╕Ыр╕гр╕▓р╕кр╕▓р╕Ч! ЁЯП░
    }

    impl Rectangle {
        // Method (р╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕Др╕┤р╕Фр╣Ар╕ер╕Вр╕Юр╕Бр╕Юр╕▓! ЁЯФв)
        const fn area(&self) -> u32 {
            self.width * self.height  // р╕Др╕│р╕Щр╕зр╕Ур╕нр╕▓р╕Ур╕▓р╣Ар╕Вр╕Х! ЁЯЧ║я╕П
        }

        const fn can_hold(&self, other: &Self) -> bool {
            self.width > other.width && self.height > other.height  // р╣Ар╕Кр╣Зр╕Др╕зр╣Ир╕▓р╣Гр╕кр╣Ир╣Др╕Фр╣Йр╕бр╕▒р╣Йр╕в! ЁЯУж
        }

        // Associated function (р╣Вр╕гр╕Зр╕Зр╕▓р╕Щр╕Ьр╕ер╕┤р╕Хр╕кр╕╡р╣Ир╣Ар╕лр╕ер╕╡р╣Ир╕вр╕б! ЁЯПн)
        const fn square(size: u32) -> Self {
            Self {
                width: size,
                height: size,  // р╕кр╕╡р╣Ир╣Ар╕лр╕ер╕╡р╣Ир╕вр╕бр╕Ир╕▒р╕Хр╕╕р╕гр╕▒р╕кр╕кр╕бр╕Ър╕╣р╕гр╕Ур╣Мр╣Бр╕Ър╕Ъ! тмЬ
            }
        }
    }

    println!("\nЁЯУР === Methods р╣Бр╕ер╕░ Associated Functions: р╕лр╣Йр╕нр╕Зр╣Бр╕ер╣Зр╕Ър╕Др╕Ур╕┤р╕Хр╕ир╕▓р╕кр╕Хр╕гр╣М! === ЁЯУР");
    let rect1 = Rectangle {
        width: 30,   // р╕Ыр╕гр╕▓р╕кр╕▓р╕Чр╣Гр╕лр╕Нр╣И! ЁЯП░
        height: 50,
    };

    let rect2 = Rectangle {
        width: 10,   // р╕Бр╕гр╕░р╕Чр╣Ир╕нр╕бр╣Ар╕ер╣Зр╕Б! ЁЯПа
        height: 40,
    };

    let square = Rectangle::square(25);  // р╕кр╕▒р╣Ир╕Зр╕Чр╕│р╕кр╕╡р╣Ир╣Ар╕лр╕ер╕╡р╣Ир╕вр╕бр╕Ир╕▒р╕Хр╕╕р╕гр╕▒р╕к! ЁЯУР

    println!("ЁЯУК р╕кр╕╡р╣Ир╣Ар╕лр╕ер╕╡р╣Ир╕вр╕б 1: {rect1:?} (р╕Ыр╕гр╕▓р╕кр╕▓р╕Чр╣Гр╕лр╕Нр╣И! ЁЯП░)");
    println!("ЁЯУП р╕Юр╕╖р╣Йр╕Щр╕Чр╕╡р╣И: {} р╕Хр╕▓р╕гр╕▓р╕Зр╕лр╕Щр╣Ир╕зр╕в (р╕нр╕▓р╕Ур╕▓р╣Ар╕Вр╕Хр╕Бр╕зр╣Йр╕▓р╕Зр╣Гр╕лр╕Нр╣И! ЁЯЧ║я╕П)", rect1.area());
    println!(
        "ЁЯдФ rect1 р╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Гр╕кр╣И rect2 р╣Др╕Фр╣Йр╕лр╕гр╕╖р╕нр╣Др╕бр╣И? {} (р╣Ар╕Чр╕кр╕Хр╣Мр╣Ар╕Бр╕бр╣Ар╕Хр╕Хр╕гр╕┤р╕к! ЁЯОо)",
        rect1.can_hold(&rect2)
    );
    println!("тмЬ р╕кр╕╡р╣Ир╣Ар╕лр╕ер╕╡р╣Ир╕вр╕бр╕Ир╕▒р╕Хр╕╕р╕гр╕▒р╕к: {square:?} (р╕кр╕бр╕бр╕▓р╕Хр╕гр╕кр╕бр╕Ър╕╣р╕гр╕Ур╣М! тЬи)");
}
