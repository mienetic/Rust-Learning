//! üîó ORM Examples - ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö Object-Relational Mapping
//! 
//! ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ORM ‡πÅ‡∏•‡∏∞ Database Abstraction Layer
//! ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á Diesel, SQLx, ‡πÅ‡∏•‡∏∞ SeaORM patterns

use std::collections::HashMap;
use std::fmt;

/// üìä ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User Model
#[derive(Debug, Clone, PartialEq)]
pub struct User {
    pub id: Option<i32>,
    pub username: String,
    pub email: String,
    pub password_hash: String,
    pub created_at: String,
    pub updated_at: String,
    pub is_active: bool,
}

impl User {
    /// ‡∏™‡∏£‡πâ‡∏≤‡∏á User ‡πÉ‡∏´‡∏°‡πà
    pub fn new(username: &str, email: &str, password: &str) -> Self {
        Self {
            id: None,
            username: username.to_string(),
            email: email.to_string(),
            password_hash: format!("hashed_{}", password), // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£ hash
            created_at: "2024-01-15T10:30:00Z".to_string(),
            updated_at: "2024-01-15T10:30:00Z".to_string(),
            is_active: true,
        }
    }
    
    /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    pub fn verify_password(&self, password: &str) -> bool {
        self.password_hash == format!("hashed_{}", password)
    }
}

/// üìù ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Post Model
#[derive(Debug, Clone)]
pub struct Post {
    pub id: Option<i32>,
    pub title: String,
    pub content: String,
    pub author_id: i32,
    pub published: bool,
    pub created_at: String,
    pub updated_at: String,
}

/// üîç Query Builder Pattern
#[derive(Debug)]
pub struct QueryBuilder<T> {
    table_name: String,
    conditions: Vec<String>,
    order_by: Vec<String>,
    limit: Option<usize>,
    offset: Option<usize>,
    _phantom: std::marker::PhantomData<T>,
}

impl<T> QueryBuilder<T> {
    /// ‡∏™‡∏£‡πâ‡∏≤‡∏á Query Builder ‡πÉ‡∏´‡∏°‡πà
    pub fn new(table_name: &str) -> Self {
        Self {
            table_name: table_name.to_string(),
            conditions: Vec::new(),
            order_by: Vec::new(),
            limit: None,
            offset: None,
            _phantom: std::marker::PhantomData,
        }
    }
    
    /// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç WHERE
    pub fn where_eq(mut self, column: &str, value: &str) -> Self {
        self.conditions.push(format!("{} = '{}'", column, value));
        self
    }
    
    /// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç WHERE LIKE
    pub fn where_like(mut self, column: &str, pattern: &str) -> Self {
        self.conditions.push(format!("{} LIKE '%{}%'", column, pattern));
        self
    }
    
    /// ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
    pub fn order_by(mut self, column: &str, direction: &str) -> Self {
        self.order_by.push(format!("{} {}", column, direction));
        self
    }
    
    /// ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    pub fn limit(mut self, count: usize) -> Self {
        self.limit = Some(count);
        self
    }
    
    /// ‡∏Ç‡πâ‡∏≤‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    pub fn offset(mut self, count: usize) -> Self {
        self.offset = Some(count);
        self
    }
    
    /// ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL Query
    pub fn to_sql(&self) -> String {
        let mut query = format!("SELECT * FROM {}", self.table_name);
        
        if !self.conditions.is_empty() {
            query.push_str(&format!(" WHERE {}", self.conditions.join(" AND ")));
        }
        
        if !self.order_by.is_empty() {
            query.push_str(&format!(" ORDER BY {}", self.order_by.join(", ")));
        }
        
        if let Some(limit) = self.limit {
            query.push_str(&format!(" LIMIT {}", limit));
        }
        
        if let Some(offset) = self.offset {
            query.push_str(&format!(" OFFSET {}", offset));
        }
        
        query
    }
}

/// üóÑÔ∏è Repository Pattern
pub trait Repository<T> {
    type Error;
    
    fn find_by_id(&self, id: i32) -> Result<Option<T>, Self::Error>;
    fn find_all(&self) -> Result<Vec<T>, Self::Error>;
    fn create(&mut self, entity: &T) -> Result<T, Self::Error>;
    fn update(&mut self, entity: &T) -> Result<T, Self::Error>;
    fn delete(&mut self, id: i32) -> Result<bool, Self::Error>;
}

/// üë§ User Repository Implementation
pub struct UserRepository {
    users: HashMap<i32, User>,
    next_id: i32,
}

impl UserRepository {
    /// ‡∏™‡∏£‡πâ‡∏≤‡∏á Repository ‡πÉ‡∏´‡∏°‡πà
    pub fn new() -> Self {
        let mut repo = Self {
            users: HashMap::new(),
            next_id: 1,
        };
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        repo.seed_data();
        repo
    }
    
    /// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    fn seed_data(&mut self) {
        let users = vec![
            User {
                id: Some(1),
                username: "somchai".to_string(),
                email: "somchai@example.com".to_string(),
                password_hash: "hashed_password123".to_string(),
                created_at: "2024-01-15T10:30:00Z".to_string(),
                updated_at: "2024-01-15T10:30:00Z".to_string(),
                is_active: true,
            },
            User {
                id: Some(2),
                username: "somying".to_string(),
                email: "somying@example.com".to_string(),
                password_hash: "hashed_mypassword".to_string(),
                created_at: "2024-01-16T14:20:00Z".to_string(),
                updated_at: "2024-01-16T14:20:00Z".to_string(),
                is_active: true,
            },
        ];
        
        for user in users {
            if let Some(id) = user.id {
                self.users.insert(id, user);
                if id >= self.next_id {
                    self.next_id = id + 1;
                }
            }
        }
    }
    
    /// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢ username
    pub fn find_by_username(&self, username: &str) -> Option<&User> {
        self.users.values().find(|user| user.username == username)
    }
    
    /// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢ email
    pub fn find_by_email(&self, email: &str) -> Option<&User> {
        self.users.values().find(|user| user.email == email)
    }
}

#[derive(Debug)]
pub enum RepositoryError {
    NotFound,
    ValidationError(String),
    DatabaseError(String),
}

impl fmt::Display for RepositoryError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            RepositoryError::NotFound => write!(f, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"),
            RepositoryError::ValidationError(msg) => write!(f, "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {}", msg),
            RepositoryError::DatabaseError(msg) => write!(f, "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {}", msg),
        }
    }
}

impl Repository<User> for UserRepository {
    type Error = RepositoryError;
    
    fn find_by_id(&self, id: i32) -> Result<Option<User>, Self::Error> {
        Ok(self.users.get(&id).cloned())
    }
    
    fn find_all(&self) -> Result<Vec<User>, Self::Error> {
        Ok(self.users.values().cloned().collect())
    }
    
    fn create(&mut self, entity: &User) -> Result<User, Self::Error> {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if entity.username.is_empty() {
            return Err(RepositoryError::ValidationError(
                "Username ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ".to_string()
            ));
        }
        
        if entity.email.is_empty() || !entity.email.contains('@') {
            return Err(RepositoryError::ValidationError(
                "Email ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á".to_string()
            ));
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ username ‡∏´‡∏£‡∏∑‡∏≠ email ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if self.find_by_username(&entity.username).is_some() {
            return Err(RepositoryError::ValidationError(
                "Username ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß".to_string()
            ));
        }
        
        if self.find_by_email(&entity.email).is_some() {
            return Err(RepositoryError::ValidationError(
                "Email ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß".to_string()
            ));
        }
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
        let mut new_user = entity.clone();
        new_user.id = Some(self.next_id);
        
        self.users.insert(self.next_id, new_user.clone());
        self.next_id += 1;
        
        println!("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà: {} (ID: {})", new_user.username, new_user.id.unwrap());
        Ok(new_user)
    }
    
    fn update(&mut self, entity: &User) -> Result<User, Self::Error> {
        let id = entity.id.ok_or(RepositoryError::ValidationError(
            "ID ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ".to_string()
        ))?;
        
        if !self.users.contains_key(&id) {
            return Err(RepositoryError::NotFound);
        }
        
        let mut updated_user = entity.clone();
        updated_user.updated_at = "2024-01-17T15:45:00Z".to_string();
        
        self.users.insert(id, updated_user.clone());
        
        println!("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {} (ID: {})", updated_user.username, id);
        Ok(updated_user)
    }
    
    fn delete(&mut self, id: i32) -> Result<bool, Self::Error> {
        if let Some(user) = self.users.remove(&id) {
            println!("üóëÔ∏è ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {} (ID: {})", user.username, id);
            Ok(true)
        } else {
            Err(RepositoryError::NotFound)
        }
    }
}

/// üîÑ Migration System
#[derive(Debug)]
pub struct Migration {
    pub version: String,
    pub name: String,
    pub up_sql: String,
    pub down_sql: String,
}

impl Migration {
    /// ‡∏™‡∏£‡πâ‡∏≤‡∏á Migration ‡πÉ‡∏´‡∏°‡πà
    pub fn new(version: &str, name: &str, up_sql: &str, down_sql: &str) -> Self {
        Self {
            version: version.to_string(),
            name: name.to_string(),
            up_sql: up_sql.to_string(),
            down_sql: down_sql.to_string(),
        }
    }
}

/// üéØ ‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö ORM
pub fn demonstrate_orm_examples() {
    println!("\nüîó === ORM Examples Demo ===");
    
    // 1. Query Builder Pattern
    println!("\n1Ô∏è‚É£ Query Builder Pattern:");
    demonstrate_query_builder();
    
    // 2. Repository Pattern
    println!("\n2Ô∏è‚É£ Repository Pattern:");
    demonstrate_repository_pattern();
    
    // 3. Migration System
    println!("\n3Ô∏è‚É£ Migration System:");
    demonstrate_migrations();
    
    // 4. ORM Patterns Comparison
    println!("\n4Ô∏è‚É£ ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö ORM Patterns:");
    compare_orm_patterns();
    
    println!("\n‚úÖ ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏¥‡∏ï ORM Examples!");
}

/// üîç ‡∏™‡∏≤‡∏ò‡∏¥‡∏ï Query Builder
fn demonstrate_query_builder() {
    println!("üîç ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Query Builder:");
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Query ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    let user_query = QueryBuilder::<User>::new("users")
        .where_eq("is_active", "true")
        .where_like("username", "som")
        .order_by("created_at", "DESC")
        .limit(10)
        .to_sql();
    
    println!("üìù User Query: {}", user_query);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Query ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå
    let post_query = QueryBuilder::<Post>::new("posts")
        .where_eq("published", "true")
        .where_eq("author_id", "1")
        .order_by("updated_at", "DESC")
        .limit(5)
        .offset(0)
        .to_sql();
    
    println!("üìù Post Query: {}", post_query);
    
    // Query ‡πÅ‡∏ö‡∏ö‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
    let complex_query = QueryBuilder::<User>::new("users")
        .where_eq("is_active", "true")
        .where_like("email", "@example.com")
        .order_by("username", "ASC")
        .order_by("created_at", "DESC")
        .limit(20)
        .to_sql();
    
    println!("üìù Complex Query: {}", complex_query);
}

/// üóÑÔ∏è ‡∏™‡∏≤‡∏ò‡∏¥‡∏ï Repository Pattern
fn demonstrate_repository_pattern() {
    println!("üóÑÔ∏è ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Repository Pattern:");
    
    let mut user_repo = UserRepository::new();
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    match user_repo.find_all() {
        Ok(users) => {
            println!("üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ({} ‡∏Ñ‡∏ô):", users.len());
            for user in &users {
                println!("   ‚Ä¢ {} ({}): {}", 
                        user.id.unwrap_or(0), user.username, user.email);
            }
        },
        Err(e) => println!("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {}", e),
    }
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢ ID
    match user_repo.find_by_id(1) {
        Ok(Some(user)) => println!("\nüîç ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ID 1: {}", user.username),
        Ok(None) => println!("\nüîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ID 1"),
        Err(e) => println!("\n‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {}", e),
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
    let new_user = User::new("wichai", "wichai@example.com", "mypassword");
    match user_repo.create(&new_user) {
        Ok(created_user) => {
            println!("\n‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {} (ID: {})", 
                    created_user.username, created_user.id.unwrap());
        },
        Err(e) => println!("\n‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {}", e),
    }
    
    // ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà username ‡∏ã‡πâ‡∏≥
    let duplicate_user = User::new("somchai", "somchai2@example.com", "password");
    match user_repo.create(&duplicate_user) {
        Ok(_) => println!("\n‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"),
        Err(e) => println!("\n‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {}", e),
    }
}

/// üîÑ ‡∏™‡∏≤‡∏ò‡∏¥‡∏ï Migration System
fn demonstrate_migrations() {
    println!("üîÑ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Migration System:");
    
    let migrations = vec![
        Migration::new(
            "001",
            "create_users_table",
            "CREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW(),\n    is_active BOOLEAN DEFAULT TRUE\n);",
            "DROP TABLE users;"
        ),
        Migration::new(
            "002",
            "create_posts_table",
            "CREATE TABLE posts (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(200) NOT NULL,\n    content TEXT NOT NULL,\n    author_id INTEGER REFERENCES users(id),\n    published BOOLEAN DEFAULT FALSE,\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);",
            "DROP TABLE posts;"
        ),
        Migration::new(
            "003",
            "add_user_profile_fields",
            "ALTER TABLE users ADD COLUMN first_name VARCHAR(50);\nALTER TABLE users ADD COLUMN last_name VARCHAR(50);\nALTER TABLE users ADD COLUMN bio TEXT;",
            "ALTER TABLE users DROP COLUMN first_name;\nALTER TABLE users DROP COLUMN last_name;\nALTER TABLE users DROP COLUMN bio;"
        ),
    ];
    
    println!("üìã Available Migrations:");
    for migration in &migrations {
        println!("   {} - {}", migration.version, migration.name);
    }
    
    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô Migration
    println!("\nüîÑ Running Migrations:");
    for migration in &migrations {
        println!("   ‚¨ÜÔ∏è Running migration {}: {}", migration.version, migration.name);
        println!("      SQL: {}", migration.up_sql.lines().next().unwrap_or(""));
    }
    
    println!("\n‚úÖ All migrations completed successfully!");
}

/// üìä ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö ORM Patterns
fn compare_orm_patterns() {
    println!("üìä ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö ORM Patterns:");
    
    let patterns = vec![
        (
            "Active Record",
            "üéØ",
            "Model ‡∏°‡∏µ method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö database operations",
            "‡∏á‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÅ‡∏ï‡πà coupling ‡∏™‡∏π‡∏á"
        ),
        (
            "Data Mapper",
            "üó∫Ô∏è",
            "‡πÅ‡∏¢‡∏Å Model ‡πÅ‡∏•‡∏∞ Database Logic",
            "‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏™‡∏π‡∏á ‡πÅ‡∏ï‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏ß‡πà‡∏≤"
        ),
        (
            "Repository Pattern",
            "üóÑÔ∏è",
            "Abstract layer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö data access",
            "‡∏á‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£ test ‡πÅ‡∏•‡∏∞ maintain"
        ),
        (
            "Query Builder",
            "üîç",
            "‡∏™‡∏£‡πâ‡∏≤‡∏á SQL ‡πÅ‡∏ö‡∏ö programmatic",
            "‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡πÅ‡∏•‡∏∞ type-safe"
        ),
    ];
    
    for (name, icon, description, pros_cons) in patterns {
        println!("   {} {}", icon, name);
        println!("     ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: {}", description);
        println!("     ‡∏Ç‡πâ‡∏≠‡∏î‡∏µ/‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏µ‡∏¢: {}", pros_cons);
        println!();
    }
    
    println!("üéØ ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ ORM Pattern:");
    println!("   ‚Ä¢ Active Record: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß");
    println!("   ‚Ä¢ Data Mapper: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô");
    println!("   ‚Ä¢ Repository: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ testability ‡∏™‡∏π‡∏á");
    println!("   ‚Ä¢ Query Builder: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö query ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ performance");
}

#[cfg(test)]
mod tests {
    use super::*;
    
    #[test]
    fn test_user_creation() {
        let user = User::new("testuser", "test@example.com", "password123");
        assert_eq!(user.username, "testuser");
        assert_eq!(user.email, "test@example.com");
        assert!(user.verify_password("password123"));
        assert!(!user.verify_password("wrongpassword"));
    }
    
    #[test]
    fn test_query_builder() {
        let query = QueryBuilder::<User>::new("users")
            .where_eq("active", "true")
            .order_by("name", "ASC")
            .limit(10)
            .to_sql();
        
        assert!(query.contains("SELECT * FROM users"));
        assert!(query.contains("WHERE active = 'true'"));
        assert!(query.contains("ORDER BY name ASC"));
        assert!(query.contains("LIMIT 10"));
    }
    
    #[test]
    fn test_user_repository() {
        let mut repo = UserRepository::new();
        
        // Test find_all
        let users = repo.find_all().unwrap();
        assert!(!users.is_empty());
        
        // Test find_by_id
        let user = repo.find_by_id(1).unwrap();
        assert!(user.is_some());
        
        // Test create
        let new_user = User::new("newuser", "new@example.com", "password");
        let created = repo.create(&new_user).unwrap();
        assert!(created.id.is_some());
        
        // Test duplicate username
        let duplicate = User::new("newuser", "another@example.com", "password");
        assert!(repo.create(&duplicate).is_err());
    }
}