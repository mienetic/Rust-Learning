//! üèä Connection Pooling - ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Connection Pool
//! 
//! ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Database Connection Pool
//! ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ resource ‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô

use std::collections::VecDeque;
use std::sync::{Arc, Mutex, Condvar};
use std::time::{Duration, Instant};
use std::thread;

/// üîó ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
#[derive(Debug, Clone)]
pub struct DatabaseConnection {
    pub id: usize,
    pub host: String,
    pub port: u16,
    pub database: String,
    pub created_at: Instant,
    pub last_used: Instant,
    pub is_active: bool,
    pub query_count: usize,
}

impl DatabaseConnection {
    /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
    pub fn new(id: usize, host: &str, port: u16, database: &str) -> Self {
        let now = Instant::now();
        Self {
            id,
            host: host.to_string(),
            port,
            database: database.to_string(),
            created_at: now,
            last_used: now,
            is_active: true,
            query_count: 0,
        }
    }
    
    /// ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô query
    pub fn execute_query(&mut self, query: &str) -> Result<String, String> {
        if !self.is_active {
            return Err("Connection is not active".to_string());
        }
        
        self.last_used = Instant::now();
        self.query_count += 1;
        
        // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        thread::sleep(Duration::from_millis(10));
        
        Ok(format!("Query executed: {} (Connection {})", query, self.id))
    }
    
    /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    pub fn is_healthy(&self) -> bool {
        self.is_active && self.last_used.elapsed() < Duration::from_secs(300) // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
    }
    
    /// ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    pub fn close(&mut self) {
        self.is_active = false;
        println!("üîå ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ {} (‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô {} queries)", self.id, self.query_count);
    }
}

/// üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á Connection Pool
#[derive(Debug, Clone)]
pub struct PoolStats {
    pub total_connections: usize,
    pub active_connections: usize,
    pub idle_connections: usize,
    pub total_queries: usize,
    pub pool_hits: usize,
    pub pool_misses: usize,
    pub created_at: Instant,
}

impl PoolStats {
    pub fn new() -> Self {
        Self {
            total_connections: 0,
            active_connections: 0,
            idle_connections: 0,
            total_queries: 0,
            pool_hits: 0,
            pool_misses: 0,
            created_at: Instant::now(),
        }
    }
    
    /// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì hit rate
    pub fn hit_rate(&self) -> f64 {
        if self.pool_hits + self.pool_misses == 0 {
            return 0.0;
        }
        self.pool_hits as f64 / (self.pool_hits + self.pool_misses) as f64 * 100.0
    }
    
    /// ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    pub fn display(&self) {
        println!("üìä Pool Statistics:");
        println!("   Total Connections: {}", self.total_connections);
        println!("   Active: {} | Idle: {}", self.active_connections, self.idle_connections);
        println!("   Total Queries: {}", self.total_queries);
        println!("   Pool Hits: {} | Misses: {}", self.pool_hits, self.pool_misses);
        println!("   Hit Rate: {:.2}%", self.hit_rate());
        println!("   Uptime: {:.2}s", self.created_at.elapsed().as_secs_f64());
    }
}

/// üèä Connection Pool Configuration
#[derive(Debug, Clone)]
pub struct PoolConfig {
    pub min_connections: usize,
    pub max_connections: usize,
    pub connection_timeout: Duration,
    pub idle_timeout: Duration,
    pub max_lifetime: Duration,
    pub health_check_interval: Duration,
}

impl Default for PoolConfig {
    fn default() -> Self {
        Self {
            min_connections: 5,
            max_connections: 20,
            connection_timeout: Duration::from_secs(30),
            idle_timeout: Duration::from_secs(600), // 10 ‡∏ô‡∏≤‡∏ó‡∏µ
            max_lifetime: Duration::from_secs(3600), // 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
            health_check_interval: Duration::from_secs(60), // 1 ‡∏ô‡∏≤‡∏ó‡∏µ
        }
    }
}

/// üèä Connection Pool Implementation
pub struct ConnectionPool {
    config: PoolConfig,
    available: Arc<Mutex<VecDeque<DatabaseConnection>>>,
    in_use: Arc<Mutex<Vec<DatabaseConnection>>>,
    stats: Arc<Mutex<PoolStats>>,
    condvar: Arc<Condvar>,
    next_id: Arc<Mutex<usize>>,
    host: String,
    port: u16,
    database: String,
}

impl ConnectionPool {
    /// ‡∏™‡∏£‡πâ‡∏≤‡∏á Connection Pool ‡πÉ‡∏´‡∏°‡πà
    pub fn new(host: &str, port: u16, database: &str, config: PoolConfig) -> Self {
        let pool = Self {
            config,
            available: Arc::new(Mutex::new(VecDeque::new())),
            in_use: Arc::new(Mutex::new(Vec::new())),
            stats: Arc::new(Mutex::new(PoolStats::new())),
            condvar: Arc::new(Condvar::new()),
            next_id: Arc::new(Mutex::new(1)),
            host: host.to_string(),
            port,
            database: database.to_string(),
        };
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        pool.initialize_connections();
        
        pool
    }
    
    /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    fn initialize_connections(&self) {
        let mut available = self.available.lock().unwrap();
        let mut stats = self.stats.lock().unwrap();
        let mut next_id = self.next_id.lock().unwrap();
        
        for _ in 0..self.config.min_connections {
            let conn = DatabaseConnection::new(
                *next_id,
                &self.host,
                self.port,
                &self.database,
            );
            
            available.push_back(conn);
            stats.total_connections += 1;
            stats.idle_connections += 1;
            *next_id += 1;
        }
        
        println!("üèä ‡∏™‡∏£‡πâ‡∏≤‡∏á Connection Pool: {} connections", self.config.min_connections);
    }
    
    /// ‡∏Ç‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å Pool
    pub fn get_connection(&self) -> Result<DatabaseConnection, String> {
        let mut available = self.available.lock().unwrap();
        let mut in_use = self.in_use.lock().unwrap();
        let mut stats = self.stats.lock().unwrap();
        
        // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á
        if let Some(mut conn) = available.pop_front() {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            if conn.is_healthy() {
                conn.last_used = Instant::now();
                in_use.push(conn.clone());
                stats.active_connections += 1;
                stats.idle_connections -= 1;
                stats.pool_hits += 1;
                
                println!("‚úÖ ‡πÑ‡∏î‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å Pool: {}", conn.id);
                return Ok(conn);
            } else {
                // ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏î‡∏µ ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
                println!("‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ {} ‡πÑ‡∏°‡πà‡∏î‡∏µ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà", conn.id);
                stats.total_connections -= 1;
            }
        }
        
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ß‡πà‡∏≤‡∏á ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        if stats.total_connections < self.config.max_connections {
            let mut next_id = self.next_id.lock().unwrap();
            let conn = DatabaseConnection::new(
                *next_id,
                &self.host,
                self.port,
                &self.database,
            );
            
            in_use.push(conn.clone());
            stats.total_connections += 1;
            stats.active_connections += 1;
            stats.pool_misses += 1;
            *next_id += 1;
            
            println!("üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà: {}", conn.id);
            return Ok(conn);
        }
        
        // ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ß‡πà‡∏≤‡∏á
        println!("‚è≥ ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ß‡πà‡∏≤‡∏á...");
        
        let timeout_result = self.condvar.wait_timeout(
            available,
            self.config.connection_timeout,
        ).unwrap();
        
        if timeout_result.1.timed_out() {
            return Err("Connection timeout".to_string());
        }
        
        // ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≠
        self.get_connection()
    }
    
    /// ‡∏Ñ‡∏∑‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Pool
    pub fn return_connection(&self, conn: DatabaseConnection) {
        let mut available = self.available.lock().unwrap();
        let mut in_use = self.in_use.lock().unwrap();
        let mut stats = self.stats.lock().unwrap();
        
        // ‡∏•‡∏ö‡∏à‡∏≤‡∏Å in_use list
        in_use.retain(|c| c.id != conn.id);
        
        // ‡πÄ‡∏Å‡πá‡∏ö connection id ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞ move
        let conn_id = conn.id;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if conn.is_healthy() && 
           conn.created_at.elapsed() < self.config.max_lifetime {
            available.push_back(conn);
            stats.active_connections -= 1;
            stats.idle_connections += 1;
            
            println!("üîÑ ‡∏Ñ‡∏∑‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ {} ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Pool", conn_id);
        } else {
            stats.total_connections -= 1;
            stats.active_connections -= 1;
            
            println!("üóëÔ∏è ‡∏ó‡∏¥‡πâ‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ {} (‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏î‡∏µ)", conn_id);
        }
        
        // ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ thread ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà
        self.condvar.notify_one();
    }
    
    /// ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î Pool
    pub fn cleanup(&self) {
        let mut available = self.available.lock().unwrap();
        let mut stats = self.stats.lock().unwrap();
        
        let initial_count = available.len();
        
        // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏î‡∏µ
        available.retain(|conn| {
            let is_valid = conn.is_healthy() && 
                          conn.created_at.elapsed() < self.config.max_lifetime;
            
            if !is_valid {
                stats.total_connections -= 1;
                stats.idle_connections -= 1;
            }
            
            is_valid
        });
        
        let removed_count = initial_count - available.len();
        if removed_count > 0 {
            println!("üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î Pool: ‡∏•‡∏ö {} ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠", removed_count);
        }
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
        let current_total = stats.total_connections;
        if current_total < self.config.min_connections {
            let mut next_id = self.next_id.lock().unwrap();
            let needed = self.config.min_connections - current_total;
            
            for _ in 0..needed {
                let conn = DatabaseConnection::new(
                    *next_id,
                    &self.host,
                    self.port,
                    &self.database,
                );
                
                available.push_back(conn);
                stats.total_connections += 1;
                stats.idle_connections += 1;
                *next_id += 1;
            }
            
            println!("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà: {} connections", needed);
        }
    }
    
    /// ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á Pool
    pub fn show_stats(&self) {
        let stats = self.stats.lock().unwrap();
        stats.display();
    }
    
    /// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö async ‡∏Å‡∏±‡∏ö Pool
    pub fn execute_query(&self, query: &str) -> Result<String, String> {
        let mut conn = self.get_connection()?;
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        {
            let mut stats = self.stats.lock().unwrap();
            stats.total_queries += 1;
        }
        
        let result = conn.execute_query(query);
        self.return_connection(conn);
        
        result
    }
}

/// üéØ ‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö Connection Pooling
pub fn demonstrate_connection_pooling() {
    println!("\nüèä === Connection Pooling Demo ===");
    
    // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Connection Pool
    println!("\n1Ô∏è‚É£ ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Connection Pool:");
    let config = PoolConfig {
        min_connections: 3,
        max_connections: 8,
        connection_timeout: Duration::from_secs(5),
        idle_timeout: Duration::from_secs(300),
        max_lifetime: Duration::from_secs(1800),
        health_check_interval: Duration::from_secs(30),
    };
    
    let pool = ConnectionPool::new("localhost", 5432, "myapp_db", config);
    pool.show_stats();
    
    // 2. ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Connection Pool
    println!("\n2Ô∏è‚É£ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Connection Pool:");
    demonstrate_pool_usage(&pool);
    
    // 3. ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Load
    println!("\n3Ô∏è‚É£ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Load:");
    demonstrate_load_testing(&pool);
    
    // 4. ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î Pool
    println!("\n4Ô∏è‚É£ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î Pool:");
    pool.cleanup();
    pool.show_stats();
    
    // 5. Best Practices
    println!("\n5Ô∏è‚É£ Best Practices ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Connection Pooling:");
    show_best_practices();
    
    println!("\n‚úÖ ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏¥‡∏ï Connection Pooling!");
}

/// üîß ‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Pool
fn demonstrate_pool_usage(pool: &ConnectionPool) {
    println!("üîß ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Pool:");
    
    // ‡∏£‡∏±‡∏ô queries ‡∏´‡∏•‡∏≤‡∏¢‡πÜ ‡∏ï‡∏±‡∏ß
    let queries = vec![
        "SELECT * FROM users WHERE active = true",
        "SELECT COUNT(*) FROM posts",
        "INSERT INTO logs (message) VALUES ('Test log')",
        "UPDATE users SET last_login = NOW() WHERE id = 1",
        "SELECT * FROM products ORDER BY created_at DESC LIMIT 10",
    ];
    
    for (i, query) in queries.iter().enumerate() {
        match pool.execute_query(query) {
            Ok(result) => println!("   ‚úÖ Query {}: {}", i + 1, result),
            Err(e) => println!("   ‚ùå Query {}: Error - {}", i + 1, e),
        }
    }
    
    println!();
    pool.show_stats();
}

/// üìà ‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Load
fn demonstrate_load_testing(pool: &ConnectionPool) {
    println!("üìà ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Load:");
    
    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏Å
    let queries = vec![
        "SELECT * FROM users",
        "SELECT * FROM posts",
        "SELECT * FROM comments",
    ];
    
    println!("üöÄ ‡∏£‡∏±‡∏ô {} queries ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô...", queries.len() * 5);
    
    for round in 1..=5 {
        println!("   Round {}: ‡∏£‡∏±‡∏ô {} queries", round, queries.len());
        
        for query in &queries {
            match pool.execute_query(query) {
                Ok(_) => print!("‚úÖ "),
                Err(_) => print!("‚ùå "),
            }
        }
        println!();
        
        // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà
        thread::sleep(Duration::from_millis(100));
    }
    
    println!();
    pool.show_stats();
}

/// üìã ‡πÅ‡∏™‡∏î‡∏á Best Practices
fn show_best_practices() {
    println!("üìã Best Practices ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Connection Pooling:");
    
    let practices = vec![
        ("üéØ", "Pool Size", "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ min/max connections ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö workload"),
        ("‚è∞", "Timeout", "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ timeout ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô deadlock"),
        ("üè•", "Health Check", "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á connection ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞"),
        ("üßπ", "Cleanup", "‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î expired connections ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥"),
        ("üìä", "Monitoring", "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô pool"),
        ("üîÑ", "Retry Logic", "‡∏°‡∏µ retry mechanism ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö connection failures"),
        ("üõ°Ô∏è", "Error Handling", "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÅ‡∏•‡∏∞ graceful"),
        ("‚ö°", "Performance", "‡πÉ‡∏ä‡πâ async/await ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö non-blocking operations"),
    ];
    
    for (icon, title, description) in practices {
        println!("   {} {}: {}", icon, title, description);
    }
    
    println!("\nüéØ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:");
    println!("   ‚Ä¢ Min Connections: 5-10 (‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö base load)");
    println!("   ‚Ä¢ Max Connections: 20-50 (‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö peak load)");
    println!("   ‚Ä¢ Connection Timeout: 30s");
    println!("   ‚Ä¢ Idle Timeout: 10 ‡∏ô‡∏≤‡∏ó‡∏µ");
    println!("   ‚Ä¢ Max Lifetime: 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á");
    println!("   ‚Ä¢ Health Check: ‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ");
}

#[cfg(test)]
mod tests {
    use super::*;
    
    #[test]
    fn test_database_connection() {
        let mut conn = DatabaseConnection::new(1, "localhost", 5432, "test_db");
        assert!(conn.is_healthy());
        
        let result = conn.execute_query("SELECT 1");
        assert!(result.is_ok());
        assert_eq!(conn.query_count, 1);
    }
    
    #[test]
    fn test_pool_stats() {
        let mut stats = PoolStats::new();
        stats.pool_hits = 80;
        stats.pool_misses = 20;
        
        assert_eq!(stats.hit_rate(), 80.0);
    }
    
    #[test]
    fn test_connection_pool() {
        let config = PoolConfig {
            min_connections: 2,
            max_connections: 5,
            ..Default::default()
        };
        
        let pool = ConnectionPool::new("localhost", 5432, "test_db", config);
        
        // Test getting connection
        let conn = pool.get_connection();
        assert!(conn.is_ok());
        
        // Test returning connection
        pool.return_connection(conn.unwrap());
        
        // Test executing query
        let result = pool.execute_query("SELECT 1");
        assert!(result.is_ok());
    }
}