//! üóÑÔ∏è SQL Databases - ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SQL
//! 
//! ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SQL ‡∏ï‡πà‡∏≤‡∏á‡πÜ
//! ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á PostgreSQL, MySQL, ‡πÅ‡∏•‡∏∞ SQLite
//! 
//! üí° Fun Fact: SQL ‡∏¢‡πà‡∏≠‡∏°‡∏≤‡∏à‡∏≤‡∏Å "Structured Query Language" 
//! ‡πÅ‡∏ï‡πà‡∏ö‡∏≤‡∏á‡∏Ñ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ß‡πà‡∏≤ "Squeal" ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏à‡∏≠ bug! üòÇ

use std::collections::HashMap;

/// üìä ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
/// ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÅ‡∏ï‡πà‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏• ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡πÄ‡∏®‡∏£‡πâ‡∏≤ üòÖ
#[derive(Debug, Clone)]
pub struct User {
    pub id: i32,
    pub name: String,
    pub email: String,
    pub age: i32,
    pub created_at: String,
}

/// üîó ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
/// ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏™‡∏°‡∏±‡∏¢‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏ï‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡∏ô üìû
#[derive(Debug)]
pub struct DatabaseConnection {
    pub host: String,
    pub port: u16,
    pub database: String,
    pub username: String,
    pub connected: bool,
}

impl DatabaseConnection {
    /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
    /// ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢ ‡πÅ‡∏ï‡πà‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ü§ù
    pub fn new(host: &str, port: u16, database: &str, username: &str) -> Self {
        Self {
            host: host.to_string(),
            port,
            database: database.to_string(),
            username: username.to_string(),
            connected: false,
        }
    }
    
    /// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    /// ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏≤‡∏∞‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ üö™
    pub fn connect(&mut self) -> Result<(), String> {
        println!("üîå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ {}:{}...", self.host, self.port);
        
        // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ (‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ô‡∏∞ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á!)
        if self.host.is_empty() {
            return Err("Host ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏´‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà! üè†‚ùì".to_string());
        }
        
        self.connected = true;
        println!("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", self.database);
        Ok(())
    }
    
    /// ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    /// ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏Å‡∏•‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô "‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞ ‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà!" üëã
    pub fn disconnect(&mut self) {
        if self.connected {
            self.connected = false;
            println!("üîå ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {} ‡πÅ‡∏•‡πâ‡∏ß", self.database);
        }
    }
}

/// üìù SQL Query Builder
/// ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏ä‡∏ü‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∏‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡πÅ‡∏ï‡πà‡∏õ‡∏£‡∏∏‡∏á SQL Query ‡πÅ‡∏ó‡∏ô! üë®‚Äçüç≥‚ú®
#[derive(Debug)]
pub struct QueryBuilder {
    query_type: String,
    table: String,
    fields: Vec<String>,
    conditions: Vec<String>,
    values: HashMap<String, String>,
}

impl QueryBuilder {
    /// ‡∏™‡∏£‡πâ‡∏≤‡∏á Query Builder ‡πÉ‡∏´‡∏°‡πà
    /// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏≤‡∏ô‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏û‡∏¥‡πÄ‡∏®‡∏©! üçΩÔ∏è
    pub fn new() -> Self {
        Self {
            query_type: String::new(),
            table: String::new(),
            fields: Vec::new(),
            conditions: Vec::new(),
            values: HashMap::new(),
        }
    }
    
    /// SELECT query
    /// ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏ã‡∏∏‡∏õ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡∏°‡∏≤‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ï üõí
    pub fn select(mut self, fields: &[&str]) -> Self {
        self.query_type = "SELECT".to_string();
        self.fields = fields.iter().map(|s| s.to_string()).collect();
        self
    }
    
    /// FROM clause  
    /// ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏õ‡πÄ‡∏≠‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÇ‡∏ï‡πä‡∏∞‡πÑ‡∏´‡∏ô ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ö‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å‡πÉ‡∏ô‡∏´‡πâ‡∏≤‡∏á üè™
    pub fn from(mut self, table: &str) -> Self {
        self.table = table.to_string();
        self
    }
    
    /// WHERE clause
    /// ‡πÉ‡∏™‡πà‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡πÅ‡∏ü ‡πÄ‡∏≠‡∏≤‡πÅ‡∏ï‡πà‡πÄ‡∏°‡∏•‡πá‡∏î‡∏î‡∏µ‡πÜ ‚òï
    pub fn where_clause(mut self, condition: &str) -> Self {
        self.conditions.push(condition.to_string());
        self
    }
    
    /// INSERT query
    /// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏™‡πà‡∏Ç‡∏≠‡∏á‡∏•‡∏á‡πÉ‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á üì¶
    pub fn insert_into(mut self, table: &str) -> Self {
        self.query_type = "INSERT".to_string();
        self.table = table.to_string();
        self
    }
    
    /// VALUES clause
    /// ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏™‡πà‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡πÉ‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á üéÅ
    pub fn values(mut self, values: HashMap<String, String>) -> Self {
        self.values = values;
        self
    }
    
    /// ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL query
    /// ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢! ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° üéÄ
    pub fn build(&self) -> String {
        match self.query_type.as_str() {
            "SELECT" => {
                let fields = if self.fields.is_empty() {
                    "*".to_string()
                } else {
                    self.fields.join(", ")
                };
                
                let mut query = format!("SELECT {} FROM {}", fields, self.table);
                
                if !self.conditions.is_empty() {
                    query.push_str(&format!(" WHERE {}", self.conditions.join(" AND ")));
                }
                
                query
            },
            "INSERT" => {
                let fields: Vec<String> = self.values.keys().cloned().collect();
                let values: Vec<String> = self.values.values().map(|v| format!("'{}'", v)).collect();
                
                format!(
                    "INSERT INTO {} ({}) VALUES ({})",
                    self.table,
                    fields.join(", "),
                    values.join(", ")
                )
            },
            _ => "Invalid query type".to_string(),
        }
    }
}

/// üéØ ‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö SQL Databases
/// ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏°‡∏≤‡∏¢‡∏≤‡∏Å‡∏• ‡πÅ‡∏ï‡πà‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•! üé©‚ú®
pub fn demonstrate_sql_databases() {
    println!("\nüóÑÔ∏è === SQL Databases Demo ===");
    
    // 1. ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î!)
    println!("\n1Ô∏è‚É£ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:");
    let mut postgres_conn = DatabaseConnection::new(
        "localhost", 
        5432, 
        "myapp_db", 
        "postgres"
    );
    
    match postgres_conn.connect() {
        Ok(_) => println!("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ PostgreSQL ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡πÇ‡∏•‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•! üéâ"),
        Err(e) => println!("‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {} - ‡∏≠‡∏¢‡πà‡∏≤‡πÄ‡∏®‡∏£‡πâ‡∏≤‡∏ô‡∏∞ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ! üòÖ", e),
    }
    
    // 2. ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á SQL Queries (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏à‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
    println!("\n2Ô∏è‚É£ ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á SQL Queries:");
    
    // SELECT query
    let select_query = QueryBuilder::new()
        .select(&["id", "name", "email"])
        .from("users")
        .where_clause("age > 18")
        .where_clause("active = true")
        .build();
    
    println!("üìù SELECT Query: {} - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏™‡πÑ‡∏ï‡∏•‡πå! üòé", select_query);
    
    // INSERT query
    let mut insert_values = HashMap::new();
    insert_values.insert("name".to_string(), "‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ".to_string());
    insert_values.insert("email".to_string(), "somchai@example.com".to_string());
    insert_values.insert("age".to_string(), "25".to_string());
    
    let insert_query = QueryBuilder::new()
        .insert_into("users")
        .values(insert_values)
        .build();
    
    println!("üìù INSERT Query: {} - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß! üë®‚Äçüë©‚Äçüëß‚Äçüë¶", insert_query);
    
    // 3. ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ô‡∏∞ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á!)
    println!("\n3Ô∏è‚É£ ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:");
    let users = simulate_fetch_users();
    
    println!("üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ({} ‡∏Ñ‡∏ô) - ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏•‡∏¢‡∏ô‡∏∞! üë®‚Äçüë©‚Äçüëß‚Äçüë¶:", users.len());
    for user in &users {
        println!("   ‚Ä¢ {} ({}): {} - ‡∏≠‡∏≤‡∏¢‡∏∏ {} ‡∏õ‡∏µ üéÇ", 
                user.id, user.name, user.email, user.age);
    }
    
    // 4. ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Database Types (‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÜ ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
    println!("\n4Ô∏è‚É£ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SQL:");
    demonstrate_database_types();
    
    // 5. ‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    postgres_conn.disconnect();
    
    println!("\n‚úÖ ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏¥‡∏ï SQL Databases! - ‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏™‡∏ô‡∏∏‡∏Å‡∏ô‡∏∞! üéâ");
}

/// üìä ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
/// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏•‡∏≠‡∏°‡πÜ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡∏Å‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏•‡∏∞‡∏Ñ‡∏£! üé≠
fn simulate_fetch_users() -> Vec<User> {
    vec![
        User {
            id: 1,
            name: "‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ".to_string(),
            email: "somchai@example.com".to_string(),
            age: 25,
            created_at: "2024-01-15".to_string(),
        },
        User {
            id: 2,
            name: "‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°".to_string(),
            email: "somying@example.com".to_string(),
            age: 28,
            created_at: "2024-01-20".to_string(),
        },
        User {
            id: 3,
            name: "‡∏ß‡∏¥‡∏ä‡∏±‡∏¢ ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å".to_string(),
            email: "wichai@example.com".to_string(),
            age: 32,
            created_at: "2024-01-25".to_string(),
        },
    ]
}

/// üóÉÔ∏è ‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SQL ‡∏ï‡πà‡∏≤‡∏á‡πÜ
/// ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÜ ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å! ü§ó
fn demonstrate_database_types() {
    println!("üìã ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SQL ‡∏ó‡∏µ‡πà‡∏ô‡∏¥‡∏¢‡∏° - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á! üêæ:");
    
    let databases = vec![
        ("PostgreSQL", "üêò", "‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö Object-Relational ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ä‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á!"),
        ("MySQL", "üê¨", "‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö Relational ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£ - ‡∏ß‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÇ‡∏•‡∏°‡∏≤!"),
        ("SQLite", "ü™∂", "‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö Embedded ‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏≤‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ - ‡πÄ‡∏ö‡∏≤‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ç‡∏ô‡∏ô‡∏Å!"),
        ("MariaDB", "ü¶≠", "‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö Open Source ‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏à‡∏≤‡∏Å MySQL - ‡∏ô‡πâ‡∏≠‡∏á‡∏™‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á MySQL!"),
    ];
    
    for (name, icon, description) in databases {
        println!("   {} {}: {}", icon, name, description);
    }
    
    println!("\nüîß ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏ñ‡πÉ‡∏ä‡πâ! üöó:");
    println!("   ‚Ä¢ PostgreSQL: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏£‡∏ñ‡∏´‡∏£‡∏π ‡∏°‡∏µ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏¢‡∏≠‡∏∞! üöô");
    println!("   ‚Ä¢ MySQL: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏£‡∏ñ‡πÄ‡∏Å‡πã‡∏á ‡πÉ‡∏ä‡πâ‡∏á‡πà‡∏≤‡∏¢! üöò");
    println!("   ‚Ä¢ SQLite: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏´‡∏£‡∏∑‡∏≠ Prototype - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô ‡πÄ‡∏ö‡∏≤‡πÜ! üö≤");
}

#[cfg(test)]
mod tests {
    use super::*;
    
    #[test]
    fn test_database_connection() {
        let mut conn = DatabaseConnection::new("localhost", 5432, "test_db", "user");
        assert!(!conn.connected);
        
        conn.connect().unwrap();
        assert!(conn.connected);
        
        conn.disconnect();
        assert!(!conn.connected);
    }
    
    #[test]
    fn test_query_builder_select() {
        let query = QueryBuilder::new()
            .select(&["name", "email"])
            .from("users")
            .where_clause("age > 18")
            .build();
        
        assert_eq!(query, "SELECT name, email FROM users WHERE age > 18");
    }
    
    #[test]
    fn test_query_builder_insert() {
        let mut values = HashMap::new();
        values.insert("name".to_string(), "Test User".to_string());
        values.insert("email".to_string(), "test@example.com".to_string());
        
        let query = QueryBuilder::new()
            .insert_into("users")
            .values(values)
            .build();
        
        assert!(query.contains("INSERT INTO users"));
        assert!(query.contains("Test User"));
        assert!(query.contains("test@example.com"));
    }
}