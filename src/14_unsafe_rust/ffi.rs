//! FFI (Foreign Function Interface) р╣Гр╕Щ Unsafe Rust - р╕Ыр╕Пр╕┤р╕Ър╕▒р╕Хр╕┤р╕Бр╕▓р╕гр╕Щр╕▒р╕Бр╕кр╕╖р╕Ър╕Вр╣Йр╕▓р╕бр╕Кр╕▓р╕Хр╕┤! ЁЯХ╡я╕ПтАНтЩВя╕ПЁЯМН
//!
//! р╣Др╕Яр╕ер╣Мр╕Щр╕╡р╣Йр╕Ыр╕гр╕░р╕Бр╕нр╕Ър╕Фр╣Йр╕зр╕в:
//! - р╕Бр╕▓р╕гр╣Ар╕гр╕╡р╕вр╕Бр╣Гр╕Кр╣Й C functions - р╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╣Ир╕нр╕Бр╕▒р╕Ър╕кр╕▓р╕вр╕ер╕▒р╕Ър╕Хр╣Ир╕▓р╕Зр╕Кр╕▓р╕Хр╕┤! ЁЯУЮЁЯЗи
//! - р╕Бр╕▓р╕гр╕кр╣Ир╕Зр╕нр╕нр╕Б Rust functions р╣Гр╕лр╣Й C - р╕Бр╕▓р╕гр╕кр╣Ир╕Зр╕кр╕▓р╕вр╕ер╕▒р╕Ър╣Др╕Ыр╕Хр╣Ир╕▓р╕Зр╕Ыр╕гр╕░р╣Ар╕Чр╕и! ЁЯЪАЁЯжА
//! - р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Бр╕▓р╕гр╕Чр╕│р╕Зр╕▓р╕Щр╕Бр╕▒р╕Ъ C libraries - р╕Бр╕▓р╕гр╕гр╣Ир╕зр╕бр╕бр╕╖р╕нр╕Бр╕▒р╕Ър╕нр╕Зр╕Др╣Мр╕Бр╕гр╕Хр╣Ир╕▓р╕Зр╕Кр╕▓р╕Хр╕┤! ЁЯдЭЁЯМР

use std::ffi::{CStr, CString};
use std::os::raw::c_char;

// р╕Бр╕▓р╕гр╣Ар╕гр╕╡р╕вр╕Бр╣Гр╕Кр╣Й C standard library functions - р╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╣Ир╕нр╕Бр╕▒р╕Ър╕лр╕Щр╣Ир╕зр╕вр╕Зр╕▓р╕Щр╕Хр╣Ир╕▓р╕Зр╕Кр╕▓р╕Хр╕┤! ЁЯУЮЁЯЗи
unsafe extern "C" {
    fn abs(input: i32) -> i32;    // ЁЯФв р╕кр╕▓р╕вр╕ер╕▒р╕Ър╕Др╕│р╕Щр╕зр╕Ур╕Др╣Ир╕▓р╕кр╕▒р╕бр╕Ър╕╣р╕гр╕Ур╣М
    fn sqrt(input: f64) -> f64;   // ЁЯУР р╕кр╕▓р╕вр╕ер╕▒р╕Ър╕Др╕│р╕Щр╕зр╕Ур╕гр╕▓р╕Бр╕Чр╕╡р╣Ир╕кр╕нр╕З
}

/// р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕З FFI р╕Юр╕╖р╣Йр╕Щр╕Рр╕▓р╕Щ - р╕Бр╕▓р╕гр╕Эр╕╢р╕Бр╕Ыр╕Пр╕┤р╕Ър╕▒р╕Хр╕┤р╕Бр╕▓р╕гр╕Вр╣Йр╕▓р╕бр╕Кр╕▓р╕Хр╕┤! ЁЯМНЁЯХ╡я╕ПтАНтЩВя╕П
pub fn ffi_examples() {
    println!("\nЁЯХ╡я╕ПтАНтЩВя╕ПЁЯМН === International Detective Operations === ЁЯУЮЁЯдЭ");

    unsafe {
        println!("ЁЯФв р╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╣Ир╕нр╕кр╕▓р╕вр╕ер╕▒р╕Ъ C: abs(-42) = {}", abs(-42));      // ЁЯУЮ р╣Ар╕гр╕╡р╕вр╕Бр╕кр╕▓р╕вр╕ер╕▒р╕Ър╕Хр╣Ир╕▓р╕Зр╕Кр╕▓р╕Хр╕┤
        println!("ЁЯУР р╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╣Ир╕нр╕кр╕▓р╕вр╕ер╕▒р╕Ъ C: sqrt(16.0) = {}", sqrt(16.0));  // ЁЯУЮ р╣Ар╕гр╕╡р╕вр╕Бр╕кр╕▓р╕вр╕ер╕▒р╕Ър╕Др╕│р╕Щр╕зр╕У
    }

    // р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Бр╕▓р╕гр╕кр╣Ир╕Зр╕нр╕нр╕Бр╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╣Гр╕лр╣Й C - р╕Бр╕▓р╕гр╕кр╣Ир╕Зр╕кр╕▓р╕вр╕ер╕▒р╕Ъ Rust р╣Др╕Ыр╕Хр╣Ир╕▓р╕Зр╕Ыр╕гр╕░р╣Ар╕Чр╕и! ЁЯЪАЁЯжА
    println!(
        "ЁЯЪА р╕кр╕▓р╕вр╕ер╕▒р╕Ъ Rust р╕Чр╕╡р╣Ир╕кр╣Ир╕Зр╣Др╕Ыр╕Хр╣Ир╕▓р╕Зр╕Ыр╕гр╕░р╣Ар╕Чр╕и: rust_function(5) = {}",
        rust_function(5)  // ЁЯжА р╕кр╕▓р╕вр╕ер╕▒р╕Ъ Rust р╕Ыр╕Пр╕┤р╕Ър╕▒р╕Хр╕┤р╕Бр╕▓р╕г
    );

    println!("ЁЯТбЁЯМН FFI р╣Гр╕Кр╣Йр╕кр╕│р╕лр╕гр╕▒р╕Ър╕кр╕гр╣Йр╕▓р╕Зр╣Ар╕Др╕гр╕╖р╕нр╕Вр╣Ир╕▓р╕вр╕кр╕▓р╕вр╕ер╕▒р╕Ър╕Вр╣Йр╕▓р╕бр╕Кр╕▓р╕Хр╕┤!");  // ЁЯдЭ р╕Др╕зр╕▓р╕бр╕гр╣Ир╕зр╕бр╕бр╕╖р╕нр╕гр╕░р╕лр╕зр╣Ир╕▓р╕Зр╕Ыр╕гр╕░р╣Ар╕Чр╕и
}

/// р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щ Rust р╕Чр╕╡р╣Ир╕кр╣Ир╕Зр╕нр╕нр╕Бр╣Гр╕лр╣Й C - р╕кр╕▓р╕вр╕ер╕▒р╕Ъ Rust р╕Ыр╕Пр╕┤р╕Ър╕▒р╕Хр╕┤р╕Бр╕▓р╕гр╕Хр╣Ир╕▓р╕Зр╕Ыр╕гр╕░р╣Ар╕Чр╕и! ЁЯЪАЁЯжА
#[unsafe(no_mangle)]
pub const extern "C" fn rust_function(x: i32) -> i32 {
    x * 2  // ЁЯФв р╕ар╕▓р╕гр╕Бр╕┤р╕Ир╣Ар╕Юр╕┤р╣Ир╕бр╕Юр╕ер╕▒р╕Зр╣Ар╕Ыр╣Зр╕Щ 2 р╣Ар╕Чр╣Ир╕▓
}

/// р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Др╕│р╕Щр╕зр╕Ур╕Чр╕╡р╣Ир╕кр╣Ир╕Зр╕нр╕нр╕Бр╣Гр╕лр╣Й C - р╕кр╕▓р╕вр╕ер╕▒р╕Ър╕Др╕│р╕Щр╕зр╕У! ЁЯзоЁЯжА
#[unsafe(no_mangle)]
pub const extern "C" fn rust_add(a: i32, b: i32) -> i32 {
    a + b  // тЮХ р╕ар╕▓р╕гр╕Бр╕┤р╕Ир╕гр╕зр╕бр╕Вр╣Йр╕нр╕бр╕╣р╕е
}

/// р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Чр╕│р╕Зр╕▓р╕Щр╕Бр╕▒р╕Ъ string р╕Чр╕╡р╣Ир╕кр╣Ир╕Зр╕нр╕нр╕Бр╣Гр╕лр╣Й C - р╕кр╕▓р╕вр╕ер╕▒р╕Ър╕Цр╕нр╕Фр╕гр╕лр╕▒р╕кр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б! ЁЯУЭЁЯФН
#[unsafe(no_mangle)]
#[allow(clippy::not_unsafe_ptr_arg_deref)]
pub const extern "C" fn rust_string_length(s: *const std::os::raw::c_char) -> usize {
    if s.is_null() {
        return 0;  // ЁЯУн р╣Др╕бр╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕ер╕▒р╕Ъ
    }

    unsafe {
        let c_str = std::ffi::CStr::from_ptr(s);  // ЁЯФН р╕Цр╕нр╕Фр╕гр╕лр╕▒р╕кр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б
        c_str.to_bytes().len()                    // ЁЯУП р╕Щр╕▒р╕Ър╕Др╕зр╕▓р╕бр╕вр╕▓р╕зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕ер╕▒р╕Ъ
    }
}

/// р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Бр╕▓р╕гр╕Чр╕│р╕Зр╕▓р╕Щр╕Бр╕▒р╕Ъ C strings - р╕Бр╕▓р╕гр╕кр╣Ир╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕ер╕▒р╕Ър╕Вр╣Йр╕▓р╕бр╕Кр╕▓р╕Хр╕┤! ЁЯУЭЁЯМН
/// 
/// # Panics
/// 
/// Panics if `CString::new` fails
#[allow(clippy::missing_panics_doc)]
pub fn c_string_examples() {
    println!("\nЁЯУЭЁЯХ╡я╕ПтАНтЩВя╕П === Secret Message Exchange === ЁЯМНЁЯУЮ");

    // р╕кр╕гр╣Йр╕▓р╕З C string р╕Ир╕▓р╕Б Rust string - р╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕гр╕лр╕▒р╕кр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕ер╕▒р╕Ъ! ЁЯФРЁЯУЭ
    let rust_string = "Hello from Rust!";  // ЁЯжА р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕ер╕▒р╕Ър╕Ир╕▓р╕Бр╕кр╕▓р╕вр╕ер╕▒р╕Ъ Rust
    let c_string = CString::new(rust_string).expect("CString::new failed");  // ЁЯФР р╣Ар╕Вр╣Йр╕▓р╕гр╕лр╕▒р╕кр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б

    // р╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ C string - р╕Бр╕▓р╕гр╕кр╣Ир╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕ер╕▒р╕Ър╣Др╕Ыр╕вр╕▒р╕Зр╕кр╕▓р╕вр╕ер╕▒р╕Ъ C! ЁЯУЮЁЯМН
    let c_ptr: *const c_char = c_string.as_ptr();  // ЁЯУб р╕Кр╣Ир╕нр╕Зр╕Чр╕▓р╕Зр╕кр╕╖р╣Ир╕нр╕кр╕▓р╕гр╕ер╕▒р╕Ъ
    let length = rust_string_length(c_ptr);  // ЁЯУП р╕зр╕▒р╕Фр╕Др╕зр╕▓р╕бр╕вр╕▓р╕зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕ер╕▒р╕Ъ

    println!("ЁЯУПЁЯФН р╕Др╕зр╕▓р╕бр╕вр╕▓р╕зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕ер╕▒р╕Ъ: {length}");

    // р╣Бр╕Ыр╕ер╕Зр╕Бр╕ер╕▒р╕Ър╣Ар╕Ыр╣Зр╕Щ Rust string - р╕Бр╕▓р╕гр╕Цр╕нр╕Фр╕гр╕лр╕▒р╕кр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕ер╕▒р╕Ъ! ЁЯФУЁЯУЭ
    unsafe {
        let c_string_ref = CStr::from_ptr(c_ptr);  // ЁЯФН р╕Фр╕▒р╕Бр╕Яр╕▒р╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б
        let back_to_rust = c_string_ref.to_str().expect("Invalid UTF-8");  // ЁЯФУ р╕Цр╕нр╕Фр╕гр╕лр╕▒р╕к
        println!("ЁЯФУЁЯжА р╕Цр╕нр╕Фр╕гр╕лр╕▒р╕кр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕ер╕▒р╕Ър╕кр╕│р╣Ар╕гр╣Зр╕И: {back_to_rust}");
    }
    
    println!("ЁЯТбЁЯФР C strings р╣Гр╕Кр╣Й null terminator (\\0) р╣Ар╕Ыр╣Зр╕Щр╕кр╕▒р╕Нр╕Нр╕▓р╕Ур╕Ир╕Ър╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕ер╕▒р╕Ъ!");
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::ffi::CString;

    #[test]
    fn test_ffi_functions() {  // ЁЯзк р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╣Ир╕нр╕кр╕▓р╕вр╕ер╕▒р╕Ър╕Хр╣Ир╕▓р╕Зр╕Кр╕▓р╕Хр╕┤
        unsafe extern "C" {
            fn abs(input: i32) -> i32;
        }

        unsafe {
            assert_eq!(abs(-42), 42);  // ЁЯФв р╕Чр╕Фр╕кр╕нр╕Ър╕кр╕▓р╕вр╕ер╕▒р╕Ър╕Др╕│р╕Щр╕зр╕Ур╕Др╣Ир╕▓р╕кр╕▒р╕бр╕Ър╕╣р╕гр╕Ур╣М
            assert_eq!(abs(42), 42);   // ЁЯФв р╕Чр╕Фр╕кр╕нр╕Ър╕кр╕▓р╕вр╕ер╕▒р╕Ър╕Др╕│р╕Щр╕зр╕Ур╕Др╣Ир╕▓р╕кр╕▒р╕бр╕Ър╕╣р╕гр╕Ур╣М
        }
    }

    #[test]
    fn test_rust_exported_functions() {  // ЁЯзк р╕Чр╕Фр╕кр╕нр╕Ър╕кр╕▓р╕вр╕ер╕▒р╕Ъ Rust р╕Чр╕╡р╣Ир╕кр╣Ир╕Зр╕нр╕нр╕Б
        assert_eq!(rust_function(5), 10);  // ЁЯЪА р╕Чр╕Фр╕кр╕нр╕Ър╕ар╕▓р╕гр╕Бр╕┤р╕Ир╣Ар╕Юр╕┤р╣Ир╕бр╕Юр╕ер╕▒р╕З
        assert_eq!(rust_add(3, 4), 7);     // тЮХ р╕Чр╕Фр╕кр╕нр╕Ър╕ар╕▓р╕гр╕Бр╕┤р╕Ир╕гр╕зр╕бр╕Вр╣Йр╕нр╕бр╕╣р╕е
    }

    #[test]
    fn test_c_string_length() {  // ЁЯзк р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Цр╕нр╕Фр╕гр╕лр╕▒р╕кр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕ер╕▒р╕Ъ
        let test_string = CString::new("Hello").unwrap();  // ЁЯУЭ р╕кр╕гр╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕ер╕▒р╕Ъ
        let length = rust_string_length(test_string.as_ptr());  // ЁЯУП р╕зр╕▒р╕Фр╕Др╕зр╕▓р╕бр╕вр╕▓р╕з
        assert_eq!(length, 5);  // тЬЕ р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Др╕зр╕▓р╕бр╕вр╕▓р╕зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕ер╕▒р╕Ъ

        // р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▒р╕Ъ null pointer - р╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕зр╣Ир╕▓р╕З! ЁЯУнЁЯФН
        let null_length = rust_string_length(std::ptr::null());
        assert_eq!(null_length, 0);  // тЬЕ р╣Др╕бр╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕ер╕▒р╕Ъ
    }
}