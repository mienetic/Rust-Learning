//! Raw Pointers р╣Гр╕Щ Unsafe Rust - р╕лр╣Йр╕нр╕Зр╕Чр╕Фр╕ер╕нр╕Зр╕Щр╕▒р╕Бр╕кр╕╖р╕Ър╕лр╕Щр╣Ир╕зр╕вр╕Др╕зр╕▓р╕бр╕Ир╕│р╕нр╕▒р╕Щр╕Хр╕гр╕▓р╕в! ЁЯХ╡я╕ПтАНтЩВя╕ПтЪб
//!
//! р╣Др╕Яр╕ер╣Мр╕Щр╕╡р╣Йр╕Ыр╕гр╕░р╕Бр╕нр╕Ър╕Фр╣Йр╕зр╕в:
//! - р╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕Зр╣Бр╕ер╕░р╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ raw pointers - р╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕бр╕╖р╕нр╕кр╕╖р╕Ър╕кр╕зр╕Щр╕нр╕▒р╕Щр╕Хр╕гр╕▓р╕в! ЁЯФНтЪая╕П
//! - р╕Бр╕▓р╕гр╣Бр╕Ыр╕ер╕Зр╕гр╕░р╕лр╕зр╣Ир╕▓р╕З references р╣Бр╕ер╕░ raw pointers - р╕Бр╕▓р╕гр╣Бр╕Ыр╕ер╕Зр╕лр╕ер╕▒р╕Бр╕Рр╕▓р╕Щ! ЁЯФДЁЯУН
//! - р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╕Чр╕╡р╣Ир╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в - р╕Бр╕▓р╕гр╕кр╕╖р╕Ър╕кр╕зр╕Щр╕нр╕вр╣Ир╕▓р╕Зр╕гр╕░р╕бр╕▒р╕Фр╕гр╕░р╕зр╕▒р╕З! ЁЯЫбя╕ПЁЯФН

use std::ptr;

/// р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Бр╕▓р╕гр╣Гр╕Кр╣Й raw pointers - р╕Бр╕▓р╕гр╕кр╕╖р╕Ър╕кр╕зр╕Щр╕Фр╣Йр╕зр╕вр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕бр╕╖р╕нр╕нр╕▒р╕Щр╕Хр╕гр╕▓р╕в! ЁЯФНтЪб
pub fn raw_pointers_examples() {
    println!("ЁЯХ╡я╕ПтАНтЩВя╕ПтЪб === Dangerous Memory Detective Lab === ЁЯФНЁЯТА");

    let mut num = 5;  // ЁЯОп р╣Ар╕Ыр╣Йр╕▓р╕лр╕бр╕▓р╕вр╕Бр╕▓р╕гр╕кр╕╖р╕Ър╕кр╕зр╕Щ

    // р╕кр╕гр╣Йр╕▓р╕З raw pointers - р╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕бр╕╖р╕нр╕кр╕╖р╕Ър╕кр╕зр╕Щр╕нр╕▒р╕Щр╕Хр╕гр╕▓р╕в! тЪбЁЯФН
    let r1 = &raw const num; // ЁЯСБя╕П р╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕бр╕╖р╕нр╕Фр╕╣р╕нр╕вр╣Ир╕▓р╕Зр╣Ар╕Фр╕╡р╕вр╕з
    let r2 = &raw mut num;   // тЬПя╕П р╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕бр╕╖р╕нр╣Бр╕Бр╣Йр╣Др╕Вр╕нр╕▒р╕Щр╕Хр╕гр╕▓р╕в

    println!("ЁЯУН р╕Чр╕╡р╣Ир╕нр╕вр╕╣р╣Ир╕лр╕ер╕▒р╕Бр╕Рр╕▓р╕Щ: {r1:p}");  // ЁЯЧ║я╕П р╣Бр╕Ьр╕Щр╕Чр╕╡р╣Ир╕лр╕Щр╣Ир╕зр╕вр╕Др╕зр╕▓р╕бр╕Ир╕│
    println!("ЁЯУК р╕Др╣Ир╕▓р╕лр╕ер╕▒р╕Бр╕Рр╕▓р╕Щ: {num}");        // ЁЯУЛ р╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ

    // р╕Бр╕▓р╕гр╣Гр╕Кр╣Й raw pointers р╕Хр╣Йр╕нр╕Зр╕нр╕вр╕╣р╣Ир╣Гр╕Щ unsafe block - р╣Ар╕Вр╕Хр╕нр╕▒р╕Щр╕Хр╕гр╕▓р╕в! тЪая╕ПЁЯТА
    unsafe {
        println!("ЁЯФН р╕кр╕╖р╕Ър╕кр╕зр╕Щр╕Ьр╣Ир╕▓р╕Щр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕бр╕╖р╕нр╕нр╕▒р╕Щр╕Хр╕гр╕▓р╕в: {}", *r1);  // ЁЯСБя╕П р╕Бр╕▓р╕гр╕кр╕нр╕Фр╣Бр╕Щр╕б

        // р╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕Др╣Ир╕▓р╕Ьр╣Ир╕▓р╕Щ mutable raw pointer - р╕Бр╕▓р╕гр╕Ыр╕ер╕нр╕бр╣Бр╕Ыр╕ер╕Зр╕лр╕ер╕▒р╕Бр╕Рр╕▓р╕Щ! тЬПя╕ПтЪб
        *r2 = 10;
        println!("тЬПя╕П р╕Ыр╕ер╕нр╕бр╣Бр╕Ыр╕ер╕Зр╕лр╕ер╕▒р╕Бр╕Рр╕▓р╕Щр╣Ар╕Ыр╣Зр╕Щ: {}", *r2);  // ЁЯФз р╕Бр╕▓р╕гр╣Бр╕Бр╣Йр╣Др╕Вр╕нр╕▒р╕Щр╕Хр╕гр╕▓р╕в
    }

    println!("ЁЯУК р╕лр╕ер╕▒р╕Бр╕Рр╕▓р╕Щр╕лр╕ер╕▒р╕Зр╕Ыр╕ер╕нр╕бр╣Бр╕Ыр╕ер╕З: {num}");  // ЁЯУЛ р╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣Мр╕Бр╕▓р╕гр╕кр╕╖р╕Ър╕кр╕зр╕Щ

    // р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕З raw pointer р╕Ир╕▓р╕Бр╕Чр╕╡р╣Ир╕нр╕вр╕╣р╣И - р╕Бр╕▓р╕гр╕Ыр╕ер╕нр╕бр╣Бр╕Ыр╕ер╕Зр╕Юр╕┤р╕Бр╕▒р╕Ф! ЁЯЧ║я╕ПЁЯТА
    let address = 0x0001_2345_usize;  // ЁЯОп р╕Юр╕┤р╕Бр╕▒р╕Фр╕Ыр╕ер╕нр╕б
    #[allow(clippy::no_effect_underscore_binding)]
    let _r = address as *const i32;   // тЪб р╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕бр╕╖р╕нр╕Ыр╕ер╕нр╕бр╣Бр╕Ыр╕ер╕З

    println!("тЪая╕ПЁЯТА р╕Др╕│р╣Ар╕Хр╕╖р╕нр╕Щ: р╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕бр╕╖р╕нр╕Ыр╕ер╕нр╕бр╣Бр╕Ыр╕ер╕Зр╕Юр╕┤р╕Бр╕▒р╕Фр╕нр╕▒р╕Щр╕Хр╕гр╕▓р╕вр╕бр╕▓р╕Б!");  // ЁЯЪи р╣Ар╕Хр╕╖р╕нр╕Щр╕ар╕▒р╕в
}

/// р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Бр╕▓р╕гр╕Ир╕▒р╕Фр╕Бр╕▓р╕г memory р╕Фр╣Йр╕зр╕в unsafe - р╕Бр╕▓р╕гр╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Др╕ер╕▒р╕Зр╕лр╕ер╕▒р╕Бр╕Рр╕▓р╕Щр╕нр╕▒р╕Щр╕Хр╕гр╕▓р╕в! ЁЯзатЪб
pub fn memory_management_examples() {
    println!("\nЁЯзаЁЯТА === Dangerous Evidence Vault Management === тЪбЁЯЧГя╕П");

    // р╕Бр╕▓р╕г allocate memory р╕Фр╣Йр╕зр╕в Box::into_raw - р╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕Зр╕Др╕ер╕▒р╕Зр╕лр╕ер╕▒р╕Бр╕Рр╕▓р╕Щр╕ер╕▒р╕Ъ! ЁЯУжтЪб
    let x = Box::new(42);                    // ЁЯУж р╕лр╕ер╕▒р╕Бр╕Рр╕▓р╕Щр╣Гр╕Щр╕Бр╕ер╣Ир╕нр╕З
    let raw_ptr = Box::into_raw(x);          // тЪб р╣Бр╕Ыр╕ер╕Зр╣Ар╕Ыр╣Зр╕Щр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕бр╕╖р╕нр╕нр╕▒р╕Щр╕Хр╕гр╕▓р╕в

    unsafe {
        println!("ЁЯУж р╕лр╕ер╕▒р╕Бр╕Рр╕▓р╕Щр╣Гр╕Щр╕Др╕ер╕▒р╕Зр╕ер╕▒р╕Ъ: {}", *raw_ptr);  // ЁЯФН р╕кр╕╖р╕Ър╕кр╕зр╕Щр╕Др╕ер╕▒р╕Зр╕ер╕▒р╕Ъ

        // р╕Хр╣Йр╕нр╕З deallocate memory р╕Фр╣Йр╕зр╕вр╕Хр╕▒р╕зр╣Ар╕нр╕З - р╕Чр╕│р╕ер╕▓р╕вр╕лр╕ер╕▒р╕Бр╕Рр╕▓р╕Щ! ЁЯТеЁЯЧСя╕П
        let _x = Box::from_raw(raw_ptr);     // ЁЯФД р╕Бр╕╣р╣Йр╕Др╕╖р╕Щр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕бр╕╖р╕н
        // _x р╕Ир╕░р╕Цр╕╣р╕Б drop р╣Ар╕бр╕╖р╣Ир╕нр╕нр╕нр╕Бр╕Ир╕▓р╕Б scope - р╕Бр╕▓р╕гр╕Чр╕│р╕ер╕▓р╕вр╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤! ЁЯТе
    }

    // р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Бр╕▓р╕гр╣Гр╕Кр╣Й std::ptr functions - р╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕бр╕╖р╕нр╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕лр╕ер╕▒р╕Бр╕Рр╕▓р╕Щр╕Вр╕▒р╣Йр╕Щр╕кр╕╣р╕З! ЁЯЫая╕ПтЪб
    let mut data = [1, 2, 3, 4, 5];         // ЁЯУЛ р╕Кр╕╕р╕Фр╕лр╕ер╕▒р╕Бр╕Рр╕▓р╕Щ
    let ptr = data.as_mut_ptr();             // тЪб р╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕бр╕╖р╕нр╣Бр╕Бр╣Йр╣Др╕Вр╕лр╕ер╕▒р╕Бр╕Рр╕▓р╕Щ

    unsafe {
        // р╕Др╕▒р╕Фр╕ер╕нр╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕е - р╕Бр╕▓р╕гр╕Ыр╕ер╕нр╕бр╣Бр╕Ыр╕ер╕Зр╕лр╕ер╕▒р╕Бр╕Рр╕▓р╕Щ! ЁЯУЛЁЯФД
        ptr::copy(ptr, ptr.add(1), 2);       // ЁЯФД р╕Др╕▒р╕Фр╕ер╕нр╕Бр╕лр╕ер╕▒р╕Бр╕Рр╕▓р╕Щ
        println!("ЁЯУЛ р╕лр╕ер╕▒р╕Зр╕Ыр╕ер╕нр╕бр╣Бр╕Ыр╕ер╕З: {data:?}");  // ЁЯУК р╕Ьр╕ер╕Бр╕▓р╕гр╕Ыр╕ер╕нр╕бр╣Бр╕Ыр╕ер╕З

        // р╣Ар╕Вр╕╡р╕вр╕Щр╕Др╣Ир╕▓р╣Гр╕лр╕бр╣И - р╕Бр╕▓р╕гр╣Бр╕Бр╣Йр╣Др╕Вр╕лр╕ер╕▒р╕Бр╕Рр╕▓р╕Щ! тЬПя╕ПЁЯТА
        ptr::write(ptr.add(4), 99);          // тЬПя╕П р╣Бр╕Бр╣Йр╣Др╕Вр╕лр╕ер╕▒р╕Бр╕Рр╕▓р╕Щ
        println!("ЁЯУЛ р╕лр╕ер╕▒р╕Зр╣Бр╕Бр╣Йр╣Др╕Вр╕лр╕ер╕▒р╕Бр╕Рр╕▓р╕Щ: {data:?}");  // ЁЯУК р╕лр╕ер╕▒р╕Бр╕Рр╕▓р╕Щр╕Чр╕╡р╣Ир╕Цр╕╣р╕Бр╣Бр╕Бр╣Йр╣Др╕В
    }
}

#[cfg(test)]
mod tests {

    #[test]
    fn test_raw_pointers() {
        let mut num = 5;
        let r1 = &raw const num;
        let r2 = &raw mut num;

        unsafe {
            assert_eq!(*r1, 5);
            *r2 = 10;
            assert_eq!(*r2, 10);
        }

        assert_eq!(num, 10);
    }
}