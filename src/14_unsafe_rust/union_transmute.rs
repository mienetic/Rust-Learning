//! Union р╣Бр╕ер╕░ Transmute р╣Гр╕Щ Unsafe Rust - р╕лр╣Йр╕нр╕Зр╕Ыр╕Пр╕┤р╕Ър╕▒р╕Хр╕┤р╕Бр╕▓р╕гр╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е! ЁЯзкЁЯФм
//!
//! р╣Др╕Яр╕ер╣Мр╕Щр╕╡р╣Йр╕Ыр╕гр╕░р╕Бр╕нр╕Ър╕Фр╣Йр╕зр╕в:
//! - р╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ union - р╕Бр╕▓р╕гр╕Ьр╕кр╕бр╕Ьр╕кр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╕▒р╕Ъ! ЁЯФАтЪЧя╕П
//! - р╕Бр╕▓р╕гр╣Гр╕Кр╣Й transmute р╕нр╕вр╣Ир╕▓р╕Зр╕гр╕░р╕бр╕▒р╕Фр╕гр╕░р╕зр╕▒р╕З - р╕Бр╕▓р╕гр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕е! ЁЯзмЁЯТА
//! - р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Бр╕▓р╕гр╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕гр╕░р╕Фр╕▒р╕Ър╕Хр╣Ир╕│ - р╕Бр╕▓р╕гр╕Чр╕Фр╕ер╕нр╕Зр╕нр╕▒р╕Щр╕Хр╕гр╕▓р╕в! тЪбЁЯФм

use std::mem;
use std::slice;

/// Helper function р╕кр╕│р╕лр╕гр╕▒р╕Ъ function pointer transmute - р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Кр╣Ир╕зр╕вр╣Гр╕Щр╕Бр╕▓р╕гр╕Чр╕Фр╕ер╕нр╕З! ЁЯзктЪб
const fn add_one(x: i32) -> i32 {
    x + 1  // ЁЯФв р╕кр╕╣р╕Хр╕гр╣Ар╕Юр╕┤р╣Ир╕бр╕Др╣Ир╕▓р╕ер╕▒р╕Ъ
}

/// р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Бр╕▓р╕гр╣Гр╕Кр╣Й union (unsafe) - р╕лр╣Йр╕нр╕Зр╕Чр╕Фр╕ер╕нр╕Зр╕Ьр╕кр╕бр╕Вр╣Йр╕нр╕бр╕╣р╕е! ЁЯзкЁЯФА
#[repr(C)]
pub union MyUnion {
    i: i32,  // ЁЯФв р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕│р╕Щр╕зр╕Щр╣Ар╕Хр╣Зр╕бр╕ер╕▒р╕Ъ
    f: f32,  // ЁЯУК р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕ир╕Щр╕┤р╕вр╕бр╕ер╕▒р╕Ъ
}

pub fn union_examples() {
    println!("\nЁЯзкЁЯФА === Data Fusion Laboratory === тЪЧя╕ПЁЯФм");

    let mut u = MyUnion { i: 42 };  // ЁЯзк р╕кр╕гр╣Йр╕▓р╕Зр╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Бр╕▓р╕гр╕Чр╕Фр╕ер╕нр╕З

    unsafe {
        println!("ЁЯФвЁЯФН р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕│р╕Щр╕зр╕Щр╣Ар╕Хр╣Зр╕б: {}", u.i);  // ЁЯУК р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Вр╣Йр╕нр╕бр╕╣р╕е

        // р╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Ар╕Ыр╣Зр╕Щ f32 (р╣Гр╕Кр╣Й memory р╣Ар╕Фр╕╡р╕вр╕зр╕Бр╕▒р╕Щ) - р╕Бр╕▓р╕гр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕кр╕Цр╕▓р╕Щр╕░р╕Вр╣Йр╕нр╕бр╕╣р╕е! ЁЯзмтЪЧя╕П
        u.f = std::f32::consts::PI;  // ЁЯУК р╣Гр╕кр╣Ир╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕ир╕Щр╕┤р╕вр╕бр╕ер╕▒р╕Ъ
        println!("ЁЯУКЁЯзк р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕ир╕Щр╕┤р╕вр╕бр╕лр╕ер╕▒р╕Зр╕Бр╕▓р╕гр╕Чр╕Фр╕ер╕нр╕З: {}", u.f);

        // р╕нр╣Ир╕▓р╕Щ i32 р╕лр╕ер╕▒р╕Зр╕Ир╕▓р╕Бр╣Ар╕Вр╕╡р╕вр╕Щ f32 (р╕нр╕▒р╕Щр╕Хр╕гр╕▓р╕в!) - р╕Бр╕▓р╕гр╕нр╣Ир╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕┤р╕Фр╕Ыр╕гр╕░р╣Ар╕ар╕Ч! тЪая╕ПЁЯТА
        println!("тЪая╕ПЁЯТА р╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕кр╕╡р╕вр╕лр╕▓р╕вр╕лр╕ер╕▒р╕Зр╕Бр╕▓р╕гр╕Чр╕Фр╕ер╕нр╕З: {} (р╕нр╕▒р╕Щр╕Хр╕гр╕▓р╕вр╕бр╕▓р╕Б!)", u.i);
    }

    println!("ЁЯТбЁЯФм Union р╣Гр╕Кр╣Йр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Чр╕Фр╕ер╕нр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕гр╕░р╕Фр╕▒р╕Ър╕Хр╣Ир╕│!");
}

/// Union р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е - р╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╕▒р╕Ъ! ЁЯФДЁЯзк
#[repr(C)]
pub union DataConverter {
    bytes: [u8; 4],  // ЁЯзм р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Фр╕┤р╕Ър╕гр╕░р╕Фр╕▒р╕Ър╣Др╕Ър╕Хр╣М
    int: u32,        // ЁЯФв р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕│р╕Щр╕зр╕Щр╣Ар╕Хр╣Зр╕б
    float: f32,      // ЁЯУК р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕ир╕Щр╕┤р╕вр╕б
}

pub fn data_conversion_examples() {
    println!("\nЁЯФДЁЯзк === Data Conversion Laboratory === ЁЯзмтЪЧя╕П");

    let mut converter = DataConverter { int: 0x4142_4344 };  // ЁЯзк р╣Ар╕Хр╕гр╕╡р╕вр╕бр╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Бр╕▓р╕гр╕Чр╕Фр╕ер╕нр╕З

    unsafe {
        println!("ЁЯФвЁЯФН р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Вр╣Йр╕нр╕бр╕╣р╕е u32: 0x{:08X}", converter.int);  // ЁЯУК р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕ер╕Вр╕Рр╕▓р╕Щ 16
        println!("ЁЯзмЁЯУК р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Др╕Ър╕Хр╣М: {:?}", converter.bytes);     // ЁЯФм р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Фр╕┤р╕Ъ

        // р╣Бр╕Ыр╕ер╕Зр╣Ар╕Ыр╣Зр╕Щ float - р╕Бр╕▓р╕гр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕кр╕Цр╕▓р╕Щр╕░р╕Вр╣Йр╕нр╕бр╕╣р╕е! ЁЯзмтЪЧя╕П
        converter.float = 12.34;  // ЁЯУК р╣Гр╕кр╣Ир╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕ир╕Щр╕┤р╕вр╕бр╣Гр╕лр╕бр╣И
        println!("ЁЯУКЁЯзк р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕ир╕Щр╕┤р╕вр╕бр╕лр╕ер╕▒р╕Зр╕Бр╕▓р╕гр╕Чр╕Фр╕ер╕нр╕З: {}", converter.float);
        println!("ЁЯзмЁЯФм р╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Др╕Ър╕Хр╣Мр╕лр╕ер╕▒р╕Зр╕Бр╕▓р╕гр╣Бр╕Ыр╕ер╕З: {:?}", converter.bytes);  // ЁЯФН р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Бр╕Ыр╕ер╕З
    }
}

/// р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Бр╕▓р╕гр╣Гр╕Кр╣Й transmute (р╕нр╕▒р╕Щр╕Хр╕гр╕▓р╕вр╕бр╕▓р╕Б!) - р╕Бр╕▓р╕гр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕нр╕▒р╕Щр╕Хр╕гр╕▓р╕в! ЁЯзмЁЯТА
pub fn transmute_examples() {
    println!("\nЁЯзмЁЯТА === Dangerous Transmutation Lab === тЪбЁЯФм");

    // transmute р╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щ type р╣Вр╕Фр╕вр╣Др╕бр╣Ир╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щ bits - р╕Бр╕▓р╕гр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕кр╕Цр╕▓р╕Щр╕░р╕Вр╣Йр╕нр╕бр╕╣р╕е! ЁЯзктЪЧя╕П
    let a = [0u8, 1u8, 0u8, 0u8];  // ЁЯзм р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Фр╕┤р╕Ър╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Чр╕Фр╕ер╕нр╕З

    let b: u32 = u32::from_ne_bytes(a);  // ЁЯФД р╕Бр╕▓р╕гр╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕нр╕▒р╕Щр╕Хр╕гр╕▓р╕в
    println!("ЁЯзмЁЯФв р╕Бр╕▓р╕гр╣Бр╕Ыр╕ер╕З [0u8, 1u8, 0u8, 0u8] р╣Ар╕Ыр╣Зр╕Щ u32: {b}");

    // р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Чр╕╡р╣Ир╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕вр╕Бр╕зр╣Ир╕▓: р╕Бр╕▓р╕гр╣Бр╕Ыр╕ер╕З reference - р╕Бр╕▓р╕гр╕Чр╕Фр╕ер╕нр╕Зр╕Чр╕╡р╣Ир╕Др╕зр╕Ър╕Др╕╕р╕бр╣Др╕Фр╣Й! ЁЯФмтЬЕ
    let s = "hello";           // ЁЯУЭ р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Хр╣Йр╕Щр╕Йр╕Ър╕▒р╕Ъ
    let ptr = s.as_ptr();      // ЁЯОп р╕Хр╕▒р╕зр╕Кр╕╡р╣Йр╣Др╕Ыр╕вр╕▒р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е
    let len = s.len();         // ЁЯУП р╕Др╕зр╕▓р╕бр╕вр╕▓р╕зр╕Вр╣Йр╕нр╕бр╕╣р╕е

    unsafe {
        let slice = slice::from_raw_parts(ptr, len);              // ЁЯзм р╕кр╕гр╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Бр╕Хр╕▒р╕зр╕Кр╕╡р╣Й
        let reconstructed = std::str::from_utf8_unchecked(slice);  // ЁЯУЭ р╕Ыр╕гр╕░р╕Бр╕нр╕Ър╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╣Гр╕лр╕бр╣И
        println!("ЁЯУЭЁЯФм р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕╡р╣Ир╕Ыр╕гр╕░р╕Бр╕нр╕Ър╣Гр╕лр╕бр╣И: {reconstructed}");
    }

    println!("тЪая╕ПЁЯТА transmute р╕нр╕▒р╕Щр╕Хр╕гр╕▓р╕вр╕бр╕▓р╕Б! р╣Гр╕Кр╣Йр╣Ар╕Йр╕Юр╕▓р╕░р╣Гр╕Щр╕лр╣Йр╕нр╕Зр╕Ыр╕Пр╕┤р╕Ър╕▒р╕Хр╕┤р╕Бр╕▓р╕г!");
    println!("ЁЯТбЁЯФм р╕Др╕зр╕гр╣Гр╕Кр╣Й as casting р╕лр╕гр╕╖р╕н From/Into traits р╣Бр╕Чр╕Щ!");
}

/// р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Бр╕▓р╕гр╣Гр╕Кр╣Й transmute р╕Бр╕▒р╕Ъ function pointers - р╕Бр╕▓р╕гр╣Бр╕Ыр╕ер╕Зр╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕нр╕▒р╕Щр╕Хр╕гр╕▓р╕в! ЁЯОпЁЯТА
pub fn function_pointer_transmute() {
    println!("\nЁЯОпЁЯТА === Function Transmutation Lab === тЪбЁЯзк");

    let fn_ptr: fn(i32) -> i32 = add_one;  // ЁЯОп р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Хр╣Йр╕Щр╕Йр╕Ър╕▒р╕Ъ

    unsafe {
        // р╣Бр╕Ыр╕ер╕З function pointer р╣Ар╕Ыр╣Зр╕Щ raw pointer - р╕Бр╕▓р╕гр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╣Ар╕Ыр╣Зр╕Щр╕Хр╕▒р╕зр╕Кр╕╡р╣Й! ЁЯзмЁЯОп
        let raw_ptr: *const () = fn_ptr as *const ();  // ЁЯУН р╕Хр╕▒р╕зр╕Кр╕╡р╣Йр╕нр╕▒р╕Щр╕Хр╕гр╕▓р╕в
        println!("ЁЯУНЁЯФм р╕Чр╕╡р╣Ир╕нр╕вр╕╣р╣Ир╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╣Гр╕Щр╕лр╕Щр╣Ир╕зр╕вр╕Др╕зр╕▓р╕бр╕Ир╕│: {raw_ptr:p}");

        // р╣Бр╕Ыр╕ер╕Зр╕Бр╕ер╕▒р╕Ър╣Ар╕Ыр╣Зр╕Щ function pointer - р╕Бр╕▓р╕гр╕Ыр╕гр╕░р╕Бр╕нр╕Ър╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╣Гр╕лр╕бр╣И! ЁЯзктЪб
        let fn_ptr_back: fn(i32) -> i32 = mem::transmute(raw_ptr);  // ЁЯОп р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Чр╕╡р╣Ир╕Ыр╕гр╕░р╕Бр╕нр╕Ър╣Гр╕лр╕бр╣И
        println!("ЁЯзоЁЯФм р╕Чр╕Фр╕кр╕нр╕Ър╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Чр╕╡р╣Ир╕Ыр╕гр╕░р╕Бр╕нр╕Ър╣Гр╕лр╕бр╣И: 5 + 1 = {}", fn_ptr_back(5));
    }

    println!("тЪая╕ПЁЯТА р╕Бр╕▓р╕г transmute function pointers р╕нр╕▒р╕Щр╕Хр╕гр╕▓р╕вр╕кр╕╕р╕Фр╕Вр╕╡р╕Ф!");
}

/// р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Бр╕▓р╕гр╣Гр╕Кр╣Й `transmute_copy` (р╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕вр╕Бр╕зр╣Ир╕▓) - р╕Бр╕▓р╕гр╕Др╕▒р╕Фр╕ер╕нр╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕нр╕вр╣Ир╕▓р╕Зр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в! ЁЯУЛЁЯФм
pub fn transmute_copy_examples() {
    println!("\nЁЯУЛЁЯФм === Safe Copy Transmutation Lab === тЬЕЁЯзк");

    let x: f32 = std::f32::consts::PI;  // ЁЯУК р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕ир╕Щр╕┤р╕вр╕бр╕Хр╣Йр╕Щр╕Йр╕Ър╕▒р╕Ъ

    unsafe {
        // transmute_copy р╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕вр╕Бр╕зр╣Ир╕▓р╣Ар╕Юр╕гр╕▓р╕░р╣Др╕бр╣И move ownership - р╕Бр╕▓р╕гр╕Др╕▒р╕Фр╕ер╕нр╕Бр╕нр╕вр╣Ир╕▓р╕Зр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в! ЁЯУЛтЬЕ
        let bits: u32 = mem::transmute_copy(&x);  // ЁЯзм р╕Др╕▒р╕Фр╕ер╕нр╕Бр╣Бр╕ер╕░р╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е
        println!("ЁЯУКЁЯФм р╕Бр╕▓р╕гр╣Бр╕Ыр╕ер╕З f32 {x} р╣Ар╕Ыр╣Зр╕Щ bits: 0x{bits:08X}");

        // р╣Бр╕Ыр╕ер╕Зр╕Бр╕ер╕▒р╕Ъ - р╕Бр╕▓р╕гр╕Ыр╕гр╕░р╕Бр╕нр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕лр╕бр╣И! ЁЯФДЁЯзк
        let back_to_float: f32 = mem::transmute_copy(&bits);  // ЁЯУК р╕Ыр╕гр╕░р╕Бр╕нр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕ир╕Щр╕┤р╕вр╕бр╣Гр╕лр╕бр╣И
        println!("ЁЯзмЁЯУК р╕Бр╕▓р╕гр╣Бр╕Ыр╕ер╕З bits 0x{bits:08X} р╣Ар╕Ыр╣Зр╕Щ f32: {back_to_float}");
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::mem;

    #[test]
    fn test_union() {  // ЁЯзк р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Ьр╕кр╕бр╕Ьр╕кр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е
        let mut u = MyUnion { i: 42 };  // ЁЯзк р╕кр╕гр╣Йр╕▓р╕Зр╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Бр╕▓р╕гр╕Чр╕Фр╕ер╕нр╕З

        unsafe {
            assert_eq!(u.i, 42);  // тЬЕ р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ
            u.f = std::f32::consts::PI;  // ЁЯзм р╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕кр╕Цр╕▓р╕Щр╕░р╕Вр╣Йр╕нр╕бр╕╣р╕е
            assert!((u.f - std::f32::consts::PI).abs() < f32::EPSILON);  // тЬЕ р╕вр╕╖р╕Щр╕вр╕▒р╕Щр╕Бр╕▓р╕гр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Бр╕Ыр╕ер╕З
        }
    }

    #[test]
    fn test_transmute() {  // ЁЯзк р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕нр╕▒р╕Щр╕Хр╕гр╕▓р╕в
        let a = [0u8, 1u8, 0u8, 0u8];  // ЁЯзм р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Фр╕┤р╕Ър╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Чр╕Фр╕ер╕нр╕З

        let b: u32 = u32::from_ne_bytes(a);  // ЁЯФД р╕Бр╕▓р╕гр╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е
        // р╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣Мр╕Вр╕╢р╣Йр╕Щр╕нр╕вр╕╣р╣Ир╕Бр╕▒р╕Ъ endianness - р╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ъ! ЁЯФмЁЯТ╗
        assert!(b == 256 || b == 16777216);  // тЬЕ р╕вр╕╖р╕Щр╕вр╕▒р╕Щр╕Ьр╕ер╕Бр╕▓р╕гр╕Чр╕Фр╕ер╕нр╕З
    }

    #[test]
    fn test_data_converter() {  // ЁЯзк р╕Чр╕Фр╕кр╕нр╕Ър╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е
        let converter = DataConverter { int: 0x12345678 };  // ЁЯзк р╣Ар╕Хр╕гр╕╡р╕вр╕бр╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕З

        unsafe {
            assert_eq!(converter.int, 0x12345678);  // тЬЕ р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕ер╕Вр╕Рр╕▓р╕Щ 16
            // р╕Чр╕Фр╕кр╕нр╕Ър╕зр╣Ир╕▓ bytes р╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З - р╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Фр╕┤р╕Ъ! ЁЯзмЁЯФН
            assert_eq!(converter.bytes.len(), 4);  // тЬЕ р╕вр╕╖р╕Щр╕вр╕▒р╕Щр╕Вр╕Щр╕▓р╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕е
        }
    }

    #[test]
    fn test_transmute_copy() {  // ЁЯзк р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Др╕▒р╕Фр╕ер╕нр╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в
        let x: f32 = std::f32::consts::PI;  // ЁЯУК р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╣Йр╕Щр╕Йр╕Ър╕▒р╕Ъ

        unsafe {
            let bits: u32 = mem::transmute_copy(&x);              // ЁЯзм р╕Др╕▒р╕Фр╕ер╕нр╕Бр╣Бр╕ер╕░р╣Бр╕Ыр╕ер╕З
            let back_to_float: f32 = mem::transmute_copy(&bits);  // ЁЯУК р╕Ыр╕гр╕░р╕Бр╕нр╕Ър╣Гр╕лр╕бр╣И
            assert!((x - back_to_float).abs() < f32::EPSILON);    // тЬЕ р╕вр╕╖р╕Щр╕вр╕▒р╕Щр╕Др╕зр╕▓р╕бр╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З
        }
    }
}